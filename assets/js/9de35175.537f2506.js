"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[694],{4917:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"api/system-info/gpu","title":"GPU Information API Reference","description":"This page provides detailed API reference for the GPU information functionality in CatP2P.","source":"@site/docs/api/system-info/gpu.md","sourceDirName":"api/system-info","slug":"/api/system-info/gpu","permalink":"/catp2p/docs/api/system-info/gpu","draft":false,"unlisted":false,"editUrl":"https://github.com/johnnyvillas/catp2p/tree/main/docs-site/docs/api/system-info/gpu.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"System Information","permalink":"/catp2p/docs/category/system-information"},"next":{"title":"Benchmarking","permalink":"/catp2p/docs/category/benchmarking"}}');var s=r(4848),i=r(8453);const d={sidebar_position:1},a="GPU Information API Reference",l={},c=[{value:"Structures",id:"structures",level:2},{value:"<code>GpuInfo</code>",id:"gpuinfo",level:3},{value:"<code>GpuUsageInfo</code>",id:"gpuusageinfo",level:3},{value:"<code>GpuUsageStats</code>",id:"gpuusagestats",level:3},{value:"<code>TemperatureUnit</code>",id:"temperatureunit",level:3},{value:"Functions",id:"functions",level:2},{value:"Basic Information Functions",id:"basic-information-functions",level:3},{value:"<code>get_info() -&gt; Result&lt;GpuInfo, Error&gt;</code>",id:"get_info---resultgpuinfo-error",level:4},{value:"<code>get_all_info() -&gt; Result&lt;Vec&lt;GpuInfo&gt;, Error&gt;</code>",id:"get_all_info---resultvecgpuinfo-error",level:4},{value:"<code>is_available() -&gt; bool</code>",id:"is_available---bool",level:4},{value:"<code>get_info_from_adapter(adapter: &amp;Adapter) -&gt; Result&lt;GpuInfo, Error&gt;</code>",id:"get_info_from_adapteradapter-adapter---resultgpuinfo-error",level:4},{value:"Usage Monitoring Functions",id:"usage-monitoring-functions",level:3},{value:"<code>get_usage() -&gt; Result&lt;GpuUsageInfo, Error&gt;</code>",id:"get_usage---resultgpuusageinfo-error",level:4},{value:"<code>get_usage_by_name(gpu_name: &amp;str) -&gt; Result&lt;GpuUsageInfo, Error&gt;</code>",id:"get_usage_by_namegpu_name-str---resultgpuusageinfo-error",level:4},{value:"<code>monitor_usage(duration: Duration, sample_interval: Duration) -&gt; Result&lt;GpuUsageStats, Error&gt;</code>",id:"monitor_usageduration-duration-sample_interval-duration---resultgpuusagestats-error",level:4},{value:"Temperature Methods",id:"temperature-methods",level:3},{value:"<code>temperature_in(&amp;self, unit: TemperatureUnit) -&gt; Option&lt;f32&gt;</code>",id:"temperature_inself-unit-temperatureunit---optionf32",level:4},{value:"Error Handling",id:"error-handling",level:2},{value:"Platform-Specific Considerations",id:"platform-specific-considerations",level:2},{value:"Windows",id:"windows",level:3},{value:"Linux",id:"linux",level:3},{value:"macOS",id:"macos",level:3},{value:"Related Resources",id:"related-resources",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"gpu-information-api-reference",children:"GPU Information API Reference"})}),"\n",(0,s.jsx)(n.p,{children:"This page provides detailed API reference for the GPU information functionality in CatP2P."}),"\n",(0,s.jsx)(n.h2,{id:"structures",children:"Structures"}),"\n",(0,s.jsx)(n.h3,{id:"gpuinfo",children:(0,s.jsx)(n.code,{children:"GpuInfo"})}),"\n",(0,s.jsx)(n.p,{children:"Contains detailed information about a GPU."}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Field"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Example Access"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"name"})}),(0,s.jsx)(n.td,{children:"String"}),(0,s.jsx)(n.td,{children:"The name/model of the GPU"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"gpu_info.name"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"vendor"})}),(0,s.jsx)(n.td,{children:"String"}),(0,s.jsx)(n.td,{children:"The manufacturer of the GPU"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"gpu_info.vendor"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"architecture"})}),(0,s.jsx)(n.td,{children:"String"}),(0,s.jsx)(n.td,{children:"GPU architecture/generation"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"gpu_info.architecture"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"driver"})}),(0,s.jsx)(n.td,{children:"String"}),(0,s.jsx)(n.td,{children:"GPU driver information"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"gpu_info.driver"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"vram"})}),(0,s.jsx)(n.td,{children:"String"}),(0,s.jsx)(n.td,{children:'Total VRAM formatted as string (e.g., "8.0 GB")'}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"gpu_info.vram"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"backend"})}),(0,s.jsx)(n.td,{children:"String"}),(0,s.jsx)(n.td,{children:"Backend used (Vulkan, DirectX, Metal, etc.)"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"gpu_info.backend"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"is_integrated"})}),(0,s.jsx)(n.td,{children:"bool"}),(0,s.jsx)(n.td,{children:"Whether the GPU is integrated or discrete"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"if gpu_info.is_integrated { ... }"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"temperature"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Option<f32>"})}),(0,s.jsx)(n.td,{children:"Current GPU temperature in Celsius"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"if let Some(temp) = gpu_info.temperature { ... }"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"additional_properties"})}),(0,s.jsx)(n.td,{children:"HashMap of String to String"}),(0,s.jsx)(n.td,{children:"Additional properties that don't fit in the standard fields"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'gpu_info.additional_properties.get("Free VRAM")'})})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"gpuusageinfo",children:(0,s.jsx)(n.code,{children:"GpuUsageInfo"})}),"\n",(0,s.jsx)(n.p,{children:"Contains real-time usage information about a GPU."}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Field"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Example Access"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"name"})}),(0,s.jsx)(n.td,{children:"String"}),(0,s.jsx)(n.td,{children:"The name/model of the GPU"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"usage_info.name"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"vendor"})}),(0,s.jsx)(n.td,{children:"String"}),(0,s.jsx)(n.td,{children:"The manufacturer of the GPU"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"usage_info.vendor"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"total_vram_bytes"})}),(0,s.jsx)(n.td,{children:"u64"}),(0,s.jsx)(n.td,{children:"Total VRAM in bytes"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"usage_info.total_vram_bytes"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"total_vram"})}),(0,s.jsx)(n.td,{children:"String"}),(0,s.jsx)(n.td,{children:'Total VRAM formatted as string (e.g., "8.0 GB")'}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"usage_info.total_vram"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"used_vram_bytes"})}),(0,s.jsx)(n.td,{children:"u64"}),(0,s.jsx)(n.td,{children:"Used VRAM in bytes"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"usage_info.used_vram_bytes"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"used_vram"})}),(0,s.jsx)(n.td,{children:"String"}),(0,s.jsx)(n.td,{children:"Used VRAM formatted as string"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"usage_info.used_vram"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"gpu_usage_percent"})}),(0,s.jsx)(n.td,{children:"f32"}),(0,s.jsx)(n.td,{children:"GPU usage percentage (0-100)"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"usage_info.gpu_usage_percent"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"timestamp"})}),(0,s.jsx)(n.td,{children:"Instant"}),(0,s.jsx)(n.td,{children:"Timestamp when this information was collected"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"usage_info.timestamp"})})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"gpuusagestats",children:(0,s.jsx)(n.code,{children:"GpuUsageStats"})}),"\n",(0,s.jsx)(n.p,{children:"Contains statistics about GPU usage over time."}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Field"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Example Access"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"name"})}),(0,s.jsx)(n.td,{children:"String"}),(0,s.jsx)(n.td,{children:"The name/model of the GPU"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"stats.name"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"vendor"})}),(0,s.jsx)(n.td,{children:"String"}),(0,s.jsx)(n.td,{children:"The manufacturer of the GPU"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"stats.vendor"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"total_vram"})}),(0,s.jsx)(n.td,{children:"String"}),(0,s.jsx)(n.td,{children:'Total VRAM formatted as string (e.g., "8.0 GB")'}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"stats.total_vram"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"avg_usage_percent"})}),(0,s.jsx)(n.td,{children:"f32"}),(0,s.jsx)(n.td,{children:"Average GPU usage percentage"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"stats.avg_usage_percent"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"min_usage_percent"})}),(0,s.jsx)(n.td,{children:"f32"}),(0,s.jsx)(n.td,{children:"Minimum GPU usage percentage"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"stats.min_usage_percent"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"max_usage_percent"})}),(0,s.jsx)(n.td,{children:"f32"}),(0,s.jsx)(n.td,{children:"Maximum GPU usage percentage"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"stats.max_usage_percent"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"avg_used_vram"})}),(0,s.jsx)(n.td,{children:"String"}),(0,s.jsx)(n.td,{children:"Average used VRAM formatted as string"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"stats.avg_used_vram"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"min_used_vram"})}),(0,s.jsx)(n.td,{children:"String"}),(0,s.jsx)(n.td,{children:"Minimum used VRAM formatted as string"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"stats.min_used_vram"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"max_used_vram"})}),(0,s.jsx)(n.td,{children:"String"}),(0,s.jsx)(n.td,{children:"Maximum used VRAM formatted as string"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"stats.max_used_vram"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"sample_count"})}),(0,s.jsx)(n.td,{children:"usize"}),(0,s.jsx)(n.td,{children:"Number of samples taken"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"stats.sample_count"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"duration"})}),(0,s.jsx)(n.td,{children:"Duration"}),(0,s.jsx)(n.td,{children:"Duration of monitoring"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"stats.duration"})})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"temperatureunit",children:(0,s.jsx)(n.code,{children:"TemperatureUnit"})}),"\n",(0,s.jsx)(n.p,{children:"Enum representing temperature units."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"pub enum TemperatureUnit {\n    Celsius,\n    Fahrenheit,\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,s.jsx)(n.h3,{id:"basic-information-functions",children:"Basic Information Functions"}),"\n",(0,s.jsx)(n.h4,{id:"get_info---resultgpuinfo-error",children:(0,s.jsx)(n.code,{children:"get_info() -> Result<GpuInfo, Error>"})}),"\n",(0,s.jsx)(n.p,{children:"Gets information about the primary GPU."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use catp2p::hardware::gpu;\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let gpu_info = gpu::get_info()?;\n    println!("GPU: {} with {} VRAM", gpu_info.name, gpu_info.vram);\n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"get_all_info---resultvecgpuinfo-error",children:(0,s.jsx)(n.code,{children:"get_all_info() -> Result<Vec<GpuInfo>, Error>"})}),"\n",(0,s.jsx)(n.p,{children:"Gets information about all available GPUs."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use catp2p::hardware::gpu;\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let gpu_infos = gpu::get_all_info()?;\n    println!("Found {} GPUs:", gpu_infos.len());\n    for (i, gpu) in gpu_infos.iter().enumerate() {\n        println!("GPU {}: {}", i+1, gpu.name);\n    }\n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"is_available---bool",children:(0,s.jsx)(n.code,{children:"is_available() -> bool"})}),"\n",(0,s.jsx)(n.p,{children:"Checks if a GPU is available on the system."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use catp2p::hardware::gpu;\n\nfn main() {\n    if gpu::is_available() {\n        println!("GPU is available for acceleration");\n    } else {\n        println!("No GPU detected, falling back to CPU");\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"get_info_from_adapteradapter-adapter---resultgpuinfo-error",children:(0,s.jsx)(n.code,{children:"get_info_from_adapter(adapter: &Adapter) -> Result<GpuInfo, Error>"})}),"\n",(0,s.jsx)(n.p,{children:"Gets GPU information from a specific WGPU adapter."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use catp2p::hardware::gpu;\nuse wgpu::{Instance, InstanceDescriptor, Backends, RequestAdapterOptions, PowerPreference};\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let instance = Instance::new(InstanceDescriptor {\n        backends: Backends::all(),\n        dx12_shader_compiler: Default::default(),\n    });\n    \n    let adapter = pollster::block_on(async {\n        instance.request_adapter(&RequestAdapterOptions {\n            power_preference: PowerPreference::HighPerformance,\n            compatible_surface: None,\n            force_fallback_adapter: false,\n        }).await\n    }).ok_or("No adapter found")?;\n    \n    let gpu_info = gpu::get_info_from_adapter(&adapter)?;\n    println!("Adapter GPU: {}", gpu_info.name);\n    \n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"usage-monitoring-functions",children:"Usage Monitoring Functions"}),"\n",(0,s.jsx)(n.h4,{id:"get_usage---resultgpuusageinfo-error",children:(0,s.jsx)(n.code,{children:"get_usage() -> Result<GpuUsageInfo, Error>"})}),"\n",(0,s.jsx)(n.p,{children:"Gets current usage information for the primary GPU."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use catp2p::hardware::gpu;\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let usage = gpu::get_usage()?;\n    println!("GPU: {}", usage.name);\n    println!("Usage: {:.1}%", usage.gpu_usage_percent);\n    println!("VRAM: {} / {}", usage.used_vram, usage.total_vram);\n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"get_usage_by_namegpu_name-str---resultgpuusageinfo-error",children:(0,s.jsx)(n.code,{children:"get_usage_by_name(gpu_name: &str) -> Result<GpuUsageInfo, Error>"})}),"\n",(0,s.jsx)(n.p,{children:"Gets current usage information for a specific GPU by name."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use catp2p::hardware::gpu;\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let gpu_name = "NVIDIA GeForce RTX 3080";\n    let usage = gpu::get_usage_by_name(gpu_name)?;\n    println!("GPU: {}", usage.name);\n    println!("Usage: {:.1}%", usage.gpu_usage_percent);\n    println!("VRAM: {} / {}", usage.used_vram, usage.total_vram);\n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"monitor_usageduration-duration-sample_interval-duration---resultgpuusagestats-error",children:(0,s.jsx)(n.code,{children:"monitor_usage(duration: Duration, sample_interval: Duration) -> Result<GpuUsageStats, Error>"})}),"\n",(0,s.jsx)(n.p,{children:"Monitors GPU usage over a specified duration."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use catp2p::hardware::gpu;\nuse std::time::Duration;\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Monitor GPU usage for 5 seconds, sampling every 500ms\n    let stats = gpu::monitor_usage(\n        Duration::from_secs(5),\n        Duration::from_millis(500)\n    )?;\n    \n    println!("GPU: {}", stats.name);\n    println!("Average usage: {:.1}%", stats.avg_usage_percent);\n    println!("Min/Max usage: {:.1}%/{:.1}%", \n             stats.min_usage_percent, \n             stats.max_usage_percent);\n    println!("Average VRAM: {}/{}", \n             stats.avg_used_vram, \n             stats.total_vram);\n    \n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"temperature-methods",children:"Temperature Methods"}),"\n",(0,s.jsx)(n.h4,{id:"temperature_inself-unit-temperatureunit---optionf32",children:(0,s.jsx)(n.code,{children:"temperature_in(&self, unit: TemperatureUnit) -> Option<f32>"})}),"\n",(0,s.jsx)(n.p,{children:"Converts GPU temperature to the specified unit (Celsius or Fahrenheit)."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use catp2p::hardware::gpu::{self, TemperatureUnit};\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let gpu_info = gpu::get_info()?;\n    \n    if let Some(temp_c) = gpu_info.temperature {\n        println!("Temperature in Celsius: {:.1}\xb0C", temp_c);\n        \n        if let Some(temp_f) = gpu_info.temperature_in(TemperatureUnit::Fahrenheit) {\n            println!("Temperature in Fahrenheit: {:.1}\xb0F", temp_f);\n        }\n    } else {\n        println!("Temperature information not available");\n    }\n    \n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsxs)(n.p,{children:["All functions that return a ",(0,s.jsx)(n.code,{children:"Result"})," can produce the following errors:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Error::Benchmark"}),": Indicates an error during GPU detection or information retrieval"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Error::Timeout"}),": Indicates that a GPU operation timed out"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example of proper error handling:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use catp2p::hardware::gpu;\nuse catp2p::error::Error;\n\nfn main() {\n    match gpu::get_info() {\n        Ok(gpu_info) => {\n            println!("Found GPU: {}", gpu_info.name);\n        },\n        Err(Error::Benchmark(msg)) => {\n            println!("Benchmark error: {}", msg);\n        },\n        Err(Error::Timeout) => {\n            println!("Operation timed out");\n        },\n        Err(e) => {\n            println!("Other error: {}", e);\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"platform-specific-considerations",children:"Platform-Specific Considerations"}),"\n",(0,s.jsx)(n.h3,{id:"windows",children:"Windows"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Uses WGPU, WMI, and NVIDIA-SMI (for NVIDIA GPUs)"}),"\n",(0,s.jsx)(n.li,{children:"Provides detailed information for NVIDIA GPUs via nvidia-smi"}),"\n",(0,s.jsx)(n.li,{children:"Uses DXGI for memory usage information on non-NVIDIA GPUs"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"linux",children:"Linux"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Uses WGPU, NVIDIA-SMI, and various system files"}),"\n",(0,s.jsx)(n.li,{children:"Provides detailed information for NVIDIA GPUs via nvidia-smi"}),"\n",(0,s.jsx)(n.li,{children:"Uses sysfs for AMD GPU information"}),"\n",(0,s.jsx)(n.li,{children:"Uses lspci as a fallback for other GPUs"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"macos",children:"macOS"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Uses WGPU and system_profiler"}),"\n",(0,s.jsx)(n.li,{children:"Provides detailed information for Apple Silicon GPUs"}),"\n",(0,s.jsx)(n.li,{children:"Has limited information for discrete GPUs on Intel Macs"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"related-resources",children:"Related Resources"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/docs/system-info/gpu_info",children:"GPU Information Documentation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/Examples/system-info/gpu-information",children:"GPU Information Examples"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>d,x:()=>a});var t=r(6540);const s={},i=t.createContext(s);function d(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);