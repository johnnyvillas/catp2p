"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[1891],{6281:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"api/benchmark/cpu","title":"CPU Benchmarking API Reference","description":"This page provides detailed API reference for the CPU benchmarking functionality in CatP2P.","source":"@site/docs/api/benchmark/cpu.md","sourceDirName":"api/benchmark","slug":"/api/benchmark/cpu","permalink":"/catp2p/docs/api/benchmark/cpu","draft":false,"unlisted":false,"editUrl":"https://github.com/johnnyvillas/catp2p/tree/main/docs-site/docs/api/benchmark/cpu.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"API Reference","permalink":"/catp2p/docs/category/api-reference"},"next":{"title":"Drive Benchmarking API Reference","permalink":"/catp2p/docs/api/benchmark/drives"}}');var s=n(4848),t=n(8453);const c={sidebar_position:1},d="CPU Benchmarking API Reference",l={},a=[{value:"Structures",id:"structures",level:2},{value:"<code>CpuInfo</code>",id:"cpuinfo",level:3},{value:"Functions",id:"functions",level:2},{value:"Information Gathering",id:"information-gathering",level:3},{value:"Performance Testing",id:"performance-testing",level:3},{value:"Function Relationships",id:"function-relationships",level:3},{value:"Parameter Details",id:"parameter-details",level:3},{value:"Understanding CPU Benchmark Results",id:"understanding-cpu-benchmark-results",level:2},{value:"Score Interpretation",id:"score-interpretation",level:3},{value:"Typical Score Ranges",id:"typical-score-ranges",level:3},{value:"Factors Affecting Benchmark Results",id:"factors-affecting-benchmark-results",level:3},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Benchmark Methodology",id:"benchmark-methodology",level:3},{value:"Benchmark Workload Characteristics",id:"benchmark-workload-characteristics",level:3},{value:"Multi-threading Implementation",id:"multi-threading-implementation",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Comparing Results",id:"comparing-results",level:2},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Custom Benchmark Functions",id:"custom-benchmark-functions",level:3},{value:"Benchmark Comparison",id:"benchmark-comparison",level:3}];function o(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"cpu-benchmarking-api-reference",children:"CPU Benchmarking API Reference"})}),"\n",(0,s.jsx)(r.p,{children:"This page provides detailed API reference for the CPU benchmarking functionality in CatP2P."}),"\n",(0,s.jsx)(r.h2,{id:"structures",children:"Structures"}),"\n",(0,s.jsx)(r.h3,{id:"cpuinfo",children:(0,s.jsx)(r.code,{children:"CpuInfo"})}),"\n",(0,s.jsx)(r.p,{children:"Contains detailed information about the system's CPU."}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Field"}),(0,s.jsx)(r.th,{children:"Type"}),(0,s.jsx)(r.th,{children:"Description"}),(0,s.jsx)(r.th,{children:"Example Access"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"name"})}),(0,s.jsx)(r.td,{children:"String"}),(0,s.jsx)(r.td,{children:"The name/model of the CPU"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"cpu_info.name"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"cores"})}),(0,s.jsx)(r.td,{children:"usize"}),(0,s.jsx)(r.td,{children:"The number of physical cores"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"cpu_info.cores"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"logical_cores"})}),(0,s.jsx)(r.td,{children:"usize"}),(0,s.jsx)(r.td,{children:"The number of logical processors (including hyperthreading)"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"cpu_info.logical_cores"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"usage"})}),(0,s.jsx)(r.td,{children:"f32"}),(0,s.jsx)(r.td,{children:"Current CPU usage as a percentage (0-100)"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"cpu_info.usage"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"vendor"})}),(0,s.jsx)(r.td,{children:"String"}),(0,s.jsx)(r.td,{children:'CPU vendor (e.g., "Intel", "AMD")'}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"cpu_info.vendor"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"frequency"})}),(0,s.jsx)(r.td,{children:"Option<u64>"}),(0,s.jsx)(r.td,{children:"CPU frequency in MHz, if available"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"if let Some(freq) = cpu_info.frequency { ... }"})})]})]})]}),"\n",(0,s.jsx)(r.h2,{id:"functions",children:"Functions"}),"\n",(0,s.jsx)(r.h3,{id:"information-gathering",children:"Information Gathering"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Function"}),(0,s.jsx)(r.th,{children:"Return Type"}),(0,s.jsx)(r.th,{children:"Description"}),(0,s.jsx)(r.th,{children:"Example Usage"}),(0,s.jsx)(r.th,{children:"Possible Errors"})]})}),(0,s.jsx)(r.tbody,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"get_cpu_info()"})}),(0,s.jsx)(r.td,{children:"Result<CpuInfo, Error>"}),(0,s.jsx)(r.td,{children:"Retrieves detailed information about the system's CPU"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"let info = cpu::get_cpu_info()?;"})}),(0,s.jsx)(r.td,{children:"Failed to retrieve CPU information"})]})})]}),"\n",(0,s.jsx)(r.h3,{id:"performance-testing",children:"Performance Testing"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Function"}),(0,s.jsx)(r.th,{children:"Return Type"}),(0,s.jsx)(r.th,{children:"Description"}),(0,s.jsx)(r.th,{children:"Example Usage"}),(0,s.jsx)(r.th,{children:"Performance Impact"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"run_cpu_benchmark()"})}),(0,s.jsx)(r.td,{children:"Result<f64, Error>"}),(0,s.jsx)(r.td,{children:"Runs a comprehensive CPU benchmark and returns an overall score (higher is better)"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"let score = cpu::run_cpu_benchmark()?;"})}),(0,s.jsx)(r.td,{children:"High - utilizes all CPU cores"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"run_single_core_benchmark(iterations: u64)"})}),(0,s.jsx)(r.td,{children:"Result<Duration, Error>"}),(0,s.jsx)(r.td,{children:"Measures performance of a single CPU core with specified iterations"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"let duration = cpu::run_single_core_benchmark(50_000_000)?;"})}),(0,s.jsx)(r.td,{children:"Medium - runs on a single core"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"run_multi_core_benchmark(threads: usize, iterations_per_thread: u64)"})}),(0,s.jsx)(r.td,{children:"Result<Duration, Error>"}),(0,s.jsx)(r.td,{children:"Measures performance with multiple threads and specified iterations per thread"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"let duration = cpu::run_multi_core_benchmark(4, 50_000_000)?;"})}),(0,s.jsx)(r.td,{children:"High - utilizes specified number of cores"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"run_floating_point_benchmark(iterations: u64)"})}),(0,s.jsx)(r.td,{children:"Result<Duration, Error>"}),(0,s.jsx)(r.td,{children:"Measures floating-point computation performance"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"let duration = cpu::run_floating_point_benchmark(10_000_000)?;"})}),(0,s.jsx)(r.td,{children:"Medium - primarily tests FPU"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"run_averaged_benchmark(iterations: usize, benchmark_fn: F)"})}),(0,s.jsx)(r.td,{children:"Result<Duration, Error>"}),(0,s.jsx)(r.td,{children:"Runs a benchmark multiple times and returns the average duration"}),(0,s.jsx)(r.td,{children:"`let avg = cpu::run_averaged_benchmark(3,"}),(0,s.jsx)(r.td,{})]})]})]}),"\n",(0,s.jsx)(r.h3,{id:"function-relationships",children:"Function Relationships"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Function"}),(0,s.jsx)(r.th,{children:"Related Functions"}),(0,s.jsx)(r.th,{children:"Notes"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"run_cpu_benchmark()"})}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"run_single_core_benchmark()"}),", ",(0,s.jsx)(r.code,{children:"run_multi_core_benchmark()"})]}),(0,s.jsx)(r.td,{children:"Provides an overall CPU score based on performance across all cores"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"run_averaged_benchmark()"})}),(0,s.jsx)(r.td,{children:"Any benchmark function"}),(0,s.jsx)(r.td,{children:"Takes a closure that returns a benchmark result and runs it multiple times"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"get_cpu_info()"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"memory::get_memory_info()"})}),(0,s.jsx)(r.td,{children:"Often used together to get a complete system overview"})]})]})]}),"\n",(0,s.jsx)(r.h3,{id:"parameter-details",children:"Parameter Details"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Function"}),(0,s.jsx)(r.th,{children:"Parameter"}),(0,s.jsx)(r.th,{children:"Description"}),(0,s.jsx)(r.th,{children:"Recommended Values"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"run_single_core_benchmark()"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"iterations"})}),(0,s.jsx)(r.td,{children:"Number of computational iterations to perform"}),(0,s.jsx)(r.td,{children:"10,000,000 to 100,000,000"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"run_multi_core_benchmark()"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"threads"})}),(0,s.jsx)(r.td,{children:"Number of threads to use"}),(0,s.jsx)(r.td,{children:"1 to number of logical cores"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"run_multi_core_benchmark()"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"iterations_per_thread"})}),(0,s.jsx)(r.td,{children:"Iterations per thread"}),(0,s.jsx)(r.td,{children:"10,000,000 to 100,000,000"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"run_floating_point_benchmark()"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"iterations"})}),(0,s.jsx)(r.td,{children:"Number of floating-point operations to perform"}),(0,s.jsx)(r.td,{children:"1,000,000 to 50,000,000"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"run_averaged_benchmark()"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"iterations"})}),(0,s.jsx)(r.td,{children:"Number of times to run the benchmark"}),(0,s.jsx)(r.td,{children:"3 to 10"})]})]})]}),"\n",(0,s.jsx)(r.h2,{id:"understanding-cpu-benchmark-results",children:"Understanding CPU Benchmark Results"}),"\n",(0,s.jsx)(r.h3,{id:"score-interpretation",children:"Score Interpretation"}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"run_cpu_benchmark()"})," function returns a score that represents overall CPU performance:"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Higher scores indicate better performance"}),"\n",(0,s.jsxs)(r.li,{children:["The score is calculated as: ",(0,s.jsx)(r.code,{children:"1000.0 / elapsed_time * sqrt(num_cores)"})]}),"\n",(0,s.jsx)(r.li,{children:"This formula balances raw speed with parallel processing capability"}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"typical-score-ranges",children:"Typical Score Ranges"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"CPU Type"}),(0,s.jsx)(r.th,{children:"Typical Score Range"}),(0,s.jsx)(r.th,{children:"Notes"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"High-end Desktop (16+ cores)"}),(0,s.jsx)(r.td,{children:"500-1000+"}),(0,s.jsx)(r.td,{children:"Modern Threadripper, Core i9"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Mid-range Desktop (8-12 cores)"}),(0,s.jsx)(r.td,{children:"300-600"}),(0,s.jsx)(r.td,{children:"Modern Core i7, Ryzen 7"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Entry-level Desktop (4-6 cores)"}),(0,s.jsx)(r.td,{children:"150-350"}),(0,s.jsx)(r.td,{children:"Modern Core i5, Ryzen 5"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Laptop (4-8 cores)"}),(0,s.jsx)(r.td,{children:"100-400"}),(0,s.jsx)(r.td,{children:"Varies widely based on power limits"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Older Desktop (2-4 cores)"}),(0,s.jsx)(r.td,{children:"50-150"}),(0,s.jsx)(r.td,{children:"Core i3/i5, older generations"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Low-power devices"}),(0,s.jsx)(r.td,{children:"10-100"}),(0,s.jsx)(r.td,{children:"Mobile CPUs, SBCs like Raspberry Pi"})]})]})]}),"\n",(0,s.jsx)(r.h3,{id:"factors-affecting-benchmark-results",children:"Factors Affecting Benchmark Results"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Factor"}),(0,s.jsx)(r.th,{children:"Impact"}),(0,s.jsx)(r.th,{children:"Notes"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"System Load"}),(0,s.jsx)(r.td,{children:"High"}),(0,s.jsx)(r.td,{children:"Other processes using CPU can significantly reduce benchmark scores"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"CPU Frequency Scaling"}),(0,s.jsx)(r.td,{children:"High"}),(0,s.jsx)(r.td,{children:"Power-saving modes can reduce performance"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Thermal Throttling"}),(0,s.jsx)(r.td,{children:"High"}),(0,s.jsx)(r.td,{children:"CPUs may reduce frequency when they get too hot"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Memory Speed"}),(0,s.jsx)(r.td,{children:"Medium"}),(0,s.jsx)(r.td,{children:"CPU benchmarks are also affected by memory performance"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Operating System"}),(0,s.jsx)(r.td,{children:"Low to Medium"}),(0,s.jsx)(r.td,{children:"Different OS scheduling can affect multi-threaded performance"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Background Services"}),(0,s.jsx)(r.td,{children:"Medium"}),(0,s.jsx)(r.td,{children:"System services can consume CPU resources"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"BIOS/UEFI Settings"}),(0,s.jsx)(r.td,{children:"Medium to High"}),(0,s.jsx)(r.td,{children:"Power limits and other settings can affect performance"})]})]})]}),"\n",(0,s.jsx)(r.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,s.jsx)(r.h3,{id:"benchmark-methodology",children:"Benchmark Methodology"}),"\n",(0,s.jsx)(r.p,{children:"The CPU benchmarking in CatP2P uses a combination of techniques to measure CPU performance:"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Integer Operations"}),": The single-core and multi-core benchmarks primarily test integer arithmetic and logic operations"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Floating-Point Operations"}),": The floating-point benchmark tests FPU performance with transcendental functions"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Memory Access"}),": The benchmarks include memory access patterns to test cache performance"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Thread Scaling"}),": Multi-core tests evaluate how well performance scales with additional cores"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"benchmark-workload-characteristics",children:"Benchmark Workload Characteristics"}),"\n",(0,s.jsx)(r.p,{children:"The benchmark workloads are designed to:"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"Be deterministic (same input always produces same result)"}),"\n",(0,s.jsx)(r.li,{children:"Prevent compiler optimization from eliminating the work"}),"\n",(0,s.jsx)(r.li,{children:"Exercise different CPU subsystems (ALU, FPU, cache, etc.)"}),"\n",(0,s.jsx)(r.li,{children:"Scale appropriately with iteration count"}),"\n",(0,s.jsx)(r.li,{children:"Provide consistent results across different hardware"}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"multi-threading-implementation",children:"Multi-threading Implementation"}),"\n",(0,s.jsx)(r.p,{children:"The multi-core benchmark uses Rayon's thread pool to:"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"Create the specified number of worker threads"}),"\n",(0,s.jsx)(r.li,{children:"Distribute work evenly across threads"}),"\n",(0,s.jsx)(r.li,{children:"Synchronize at completion to measure total execution time"}),"\n",(0,s.jsx)(r.li,{children:"Prevent false sharing and other concurrency issues"}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsxs)(r.p,{children:["The CPU benchmarking functions use Rust's ",(0,s.jsx)(r.code,{children:"Result"})," type to handle errors gracefully. Common errors include:"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:'Error::Benchmark("Failed to create thread pool: {error}")'}),": Thread creation issues"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:'Error::Benchmark("Task execution failed: {error}")'}),": Errors during benchmark execution"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:'Error::Benchmark("Failed to retrieve CPU information: {error}")'}),": System API errors"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,s.jsx)(r.p,{children:"When running CPU benchmarks, be aware of these performance considerations:"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Warm-up Effects"}),": The first run of a benchmark may be slower due to cache warming"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Frequency Scaling"}),": Modern CPUs dynamically adjust frequency based on workload and temperature"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Background Activity"}),": System background tasks can introduce variance in results"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Power Management"}),": Different power profiles can significantly affect results"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Thermal Constraints"}),": Extended benchmarking can cause thermal throttling"]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"For the most accurate results:"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"Run benchmarks multiple times and average the results"}),"\n",(0,s.jsx)(r.li,{children:"Ensure the system is in a consistent state (temperature, background tasks)"}),"\n",(0,s.jsx)(r.li,{children:"Consider using a high-performance power profile"}),"\n",(0,s.jsx)(r.li,{children:"Allow adequate cooling for your system"}),"\n",(0,s.jsx)(r.li,{children:"Close unnecessary applications and services"}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"comparing-results",children:"Comparing Results"}),"\n",(0,s.jsx)(r.p,{children:"When comparing CPU benchmark results:"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Same Hardware"}),": Results should be consistent within 5-10% on the same hardware"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Different Hardware"}),": Compare relative performance rather than absolute scores"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Different Versions"}),": Benchmark scores may not be comparable across different CatP2P versions"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Different Workloads"}),": The general benchmark may not reflect performance for specific workloads"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,s.jsx)(r.h3,{id:"custom-benchmark-functions",children:"Custom Benchmark Functions"}),"\n",(0,s.jsx)(r.p,{children:"You can create custom CPU benchmark functions and use them with the averaging utility:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-rust",children:'use catp2p::benchmark::cpu;\nuse catp2p::error::Error;\nuse std::time::{Duration, Instant};\n\nfn custom_cpu_benchmark() -> Result<Duration, Error> {\n    let start = Instant::now();\n    \n    // Your custom CPU-intensive workload here\n    let mut result = 0;\n    for i in 0..50_000_000 {\n        result = result.wrapping_add(i);\n    }\n    \n    // Prevent compiler optimization\n    if result == 42 {\n        println!("Unlikely result: {}", result);\n    }\n    \n    Ok(start.elapsed())\n}\n\nfn main() -> Result<(), Error> {\n    // Run your custom benchmark with averaging\n    let avg_duration = cpu::run_averaged_benchmark(5, custom_cpu_benchmark)?;\n    println!("Custom benchmark average: {:?}", avg_duration);\n    \n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(r.h3,{id:"benchmark-comparison",children:"Benchmark Comparison"}),"\n",(0,s.jsx)(r.p,{children:"To compare performance across different configurations:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-rust",children:'use catp2p::benchmark::cpu;\nuse catp2p::error::Error;\n\nfn main() -> Result<(), Error> {\n    // Get CPU info for context\n    let cpu_info = cpu::get_cpu_info()?;\n    println!("CPU: {} with {} cores", cpu_info.name, cpu_info.logical_cores);\n    \n    // Compare single-core vs multi-core performance\n    let single_core_time = cpu::run_single_core_benchmark(50_000_000)?;\n    \n    let thread_counts = [1, 2, 4, 8, cpu_info.logical_cores];\n    for &threads in thread_counts.iter() {\n        if threads <= cpu_info.logical_cores {\n            let multi_core_time = cpu::run_multi_core_benchmark(threads, 50_000_000)?;\n            \n            let speedup = single_core_time.as_secs_f64() / multi_core_time.as_secs_f64();\n            let efficiency = speedup / threads as f64 * 100.0;\n            \n            println!("Threads: {}, Time: {:?}, Speedup: {:.2}x, Efficiency: {:.2}%", \n                     threads, multi_core_time, speedup, efficiency);\n        }\n    }\n    \n    Ok(())\n}\n'})})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>c,x:()=>d});var i=n(6540);const s={},t=i.createContext(s);function c(e){const r=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(t.Provider,{value:r},e.children)}}}]);