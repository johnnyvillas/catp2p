"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[891],{6281:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"api/benchmark/cpu","title":"CPU Benchmarking API Reference","description":"This page provides detailed API reference for the CPU benchmarking functionality in CatP2P.","source":"@site/docs/api/benchmark/cpu.md","sourceDirName":"api/benchmark","slug":"/api/benchmark/cpu","permalink":"/catp2p/docs/api/benchmark/cpu","draft":false,"unlisted":false,"editUrl":"https://github.com/johnnyvillas/catp2p/tree/main/docs-site/docs/api/benchmark/cpu.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Benchmarking","permalink":"/catp2p/docs/category/benchmarking"},"next":{"title":"Drive Benchmarking API Reference","permalink":"/catp2p/docs/api/benchmark/drives"}}');var t=n(4848),c=n(8453);const s={sidebar_position:1},d="CPU Benchmarking API Reference",l={},o=[{value:"Structures",id:"structures",level:2},{value:"<code>CpuInfo</code>",id:"cpuinfo",level:3},{value:"<code>CpuBenchmarkResult</code>",id:"cpubenchmarkresult",level:3},{value:"Functions",id:"functions",level:2},{value:"Information Functions",id:"information-functions",level:3},{value:"<code>get_cpu_info() -&gt; Result&lt;CpuInfo, Error&gt;</code>",id:"get_cpu_info---resultcpuinfo-error",level:4},{value:"<code>get_cpu_usage() -&gt; Result&lt;f32, Error&gt;</code>",id:"get_cpu_usage---resultf32-error",level:4},{value:"Benchmark Functions",id:"benchmark-functions",level:3},{value:"<code>run_cpu_benchmark() -&gt; Result&lt;f64, Error&gt;</code>",id:"run_cpu_benchmark---resultf64-error",level:4},{value:"<code>run_single_core_benchmark(iterations: u64) -&gt; Result&lt;std::time::Duration, Error&gt;</code>",id:"run_single_core_benchmarkiterations-u64---resultstdtimeduration-error",level:4},{value:"<code>run_multi_core_benchmark(threads: u32, iterations_per_thread: u64) -&gt; Result&lt;std::time::Duration, Error&gt;</code>",id:"run_multi_core_benchmarkthreads-u32-iterations_per_thread-u64---resultstdtimeduration-error",level:4},{value:"<code>run_floating_point_benchmark(iterations: u64) -&gt; Result&lt;std::time::Duration, Error&gt;</code>",id:"run_floating_point_benchmarkiterations-u64---resultstdtimeduration-error",level:4},{value:"<code>run_integer_benchmark(iterations: u64) -&gt; Result&lt;std::time::Duration, Error&gt;</code>",id:"run_integer_benchmarkiterations-u64---resultstdtimeduration-error",level:4},{value:"<code>run_memory_benchmark(size_mb: u32) -&gt; Result&lt;std::time::Duration, Error&gt;</code>",id:"run_memory_benchmarksize_mb-u32---resultstdtimeduration-error",level:4},{value:"<code>run_averaged_benchmark&lt;F, T, E&gt;(runs: u32, benchmark_fn: F) -&gt; Result&lt;T, Error&gt; where F: Fn() -&gt; Result&lt;T, E&gt;, T: std::ops::Add&lt;Output = T&gt; + std::ops::Div&lt;Output = T&gt; + From&lt;u32&gt; + Copy, E: std::fmt::Display</code>",id:"run_averaged_benchmarkf-t-eruns-u32-benchmark_fn-f---resultt-error-where-f-fn---resultt-e-t-stdopsaddoutput--t--stdopsdivoutput--t--fromu32--copy-e-stdfmtdisplay",level:4},{value:"<code>run_detailed_cpu_benchmark() -&gt; Result&lt;CpuBenchmarkResult, Error&gt;</code>",id:"run_detailed_cpu_benchmark---resultcpubenchmarkresult-error",level:4},{value:"Error Handling",id:"error-handling",level:2},{value:"Platform-Specific Considerations",id:"platform-specific-considerations",level:2},{value:"Windows",id:"windows",level:3},{value:"Linux",id:"linux",level:3},{value:"macOS",id:"macos",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Related Resources",id:"related-resources",level:2}];function a(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"cpu-benchmarking-api-reference",children:"CPU Benchmarking API Reference"})}),"\n",(0,t.jsx)(r.p,{children:"This page provides detailed API reference for the CPU benchmarking functionality in CatP2P."}),"\n",(0,t.jsx)(r.h2,{id:"structures",children:"Structures"}),"\n",(0,t.jsx)(r.h3,{id:"cpuinfo",children:(0,t.jsx)(r.code,{children:"CpuInfo"})}),"\n",(0,t.jsx)(r.p,{children:"Contains detailed information about the CPU."}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Field"}),(0,t.jsx)(r.th,{children:"Type"}),(0,t.jsx)(r.th,{children:"Description"}),(0,t.jsx)(r.th,{children:"Example Access"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"name"})}),(0,t.jsx)(r.td,{children:"String"}),(0,t.jsx)(r.td,{children:"The model name of the CPU"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"cpu_info.name"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"vendor"})}),(0,t.jsx)(r.td,{children:"String"}),(0,t.jsx)(r.td,{children:"The manufacturer of the CPU"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"cpu_info.vendor"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"cores"})}),(0,t.jsx)(r.td,{children:"u32"}),(0,t.jsx)(r.td,{children:"Number of physical CPU cores"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"cpu_info.cores"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"logical_cores"})}),(0,t.jsx)(r.td,{children:"u32"}),(0,t.jsx)(r.td,{children:"Number of logical CPU cores (including hyperthreading)"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"cpu_info.logical_cores"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"frequency"})}),(0,t.jsxs)(r.td,{children:["Option",(0,t.jsx)(r.code,{children:"<u64>"})]}),(0,t.jsx)(r.td,{children:"CPU frequency in MHz, if available"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"if let Some(freq) = cpu_info.frequency { ... }"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"usage"})}),(0,t.jsx)(r.td,{children:"f32"}),(0,t.jsx)(r.td,{children:"Current CPU usage percentage (0-100)"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"cpu_info.usage"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"cache_line_size"})}),(0,t.jsxs)(r.td,{children:["Option",(0,t.jsx)(r.code,{children:"<u32>"})]}),(0,t.jsx)(r.td,{children:"CPU cache line size in bytes, if available"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"if let Some(size) = cpu_info.cache_line_size { ... }"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"l1_cache_size"})}),(0,t.jsxs)(r.td,{children:["Option",(0,t.jsx)(r.code,{children:"<u32>"})]}),(0,t.jsx)(r.td,{children:"L1 cache size in KB, if available"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"if let Some(size) = cpu_info.l1_cache_size { ... }"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"l2_cache_size"})}),(0,t.jsxs)(r.td,{children:["Option",(0,t.jsx)(r.code,{children:"<u32>"})]}),(0,t.jsx)(r.td,{children:"L2 cache size in KB, if available"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"if let Some(size) = cpu_info.l2_cache_size { ... }"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"l3_cache_size"})}),(0,t.jsxs)(r.td,{children:["Option",(0,t.jsx)(r.code,{children:"<u32>"})]}),(0,t.jsx)(r.td,{children:"L3 cache size in KB, if available"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"if let Some(size) = cpu_info.l3_cache_size { ... }"})})]})]})]}),"\n",(0,t.jsx)(r.h3,{id:"cpubenchmarkresult",children:(0,t.jsx)(r.code,{children:"CpuBenchmarkResult"})}),"\n",(0,t.jsx)(r.p,{children:"Contains the results of a CPU benchmark."}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Field"}),(0,t.jsx)(r.th,{children:"Type"}),(0,t.jsx)(r.th,{children:"Description"}),(0,t.jsx)(r.th,{children:"Example Access"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"score"})}),(0,t.jsx)(r.td,{children:"f64"}),(0,t.jsx)(r.td,{children:"Overall benchmark score"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"result.score"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"single_core_score"})}),(0,t.jsx)(r.td,{children:"f64"}),(0,t.jsx)(r.td,{children:"Single-core performance score"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"result.single_core_score"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"multi_core_score"})}),(0,t.jsx)(r.td,{children:"f64"}),(0,t.jsx)(r.td,{children:"Multi-core performance score"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"result.multi_core_score"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"floating_point_score"})}),(0,t.jsx)(r.td,{children:"f64"}),(0,t.jsx)(r.td,{children:"Floating-point performance score"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"result.floating_point_score"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"integer_score"})}),(0,t.jsx)(r.td,{children:"f64"}),(0,t.jsx)(r.td,{children:"Integer performance score"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"result.integer_score"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"memory_score"})}),(0,t.jsx)(r.td,{children:"f64"}),(0,t.jsx)(r.td,{children:"Memory performance score"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"result.memory_score"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"cpu_info"})}),(0,t.jsx)(r.td,{children:"CpuInfo"}),(0,t.jsx)(r.td,{children:"Information about the CPU that was benchmarked"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"result.cpu_info"})})]})]})]}),"\n",(0,t.jsx)(r.h2,{id:"functions",children:"Functions"}),"\n",(0,t.jsx)(r.h3,{id:"information-functions",children:"Information Functions"}),"\n",(0,t.jsx)(r.h4,{id:"get_cpu_info---resultcpuinfo-error",children:(0,t.jsx)(r.code,{children:"get_cpu_info() -> Result<CpuInfo, Error>"})}),"\n",(0,t.jsx)(r.p,{children:"Gets detailed information about the CPU."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:'use catp2p::benchmark::cpu;\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let cpu_info = cpu::get_cpu_info()?;\n    println!("CPU: {} with {} cores", cpu_info.name, cpu_info.cores);\n    Ok(())\n}\n'})}),"\n",(0,t.jsx)(r.h4,{id:"get_cpu_usage---resultf32-error",children:(0,t.jsx)(r.code,{children:"get_cpu_usage() -> Result<f32, Error>"})}),"\n",(0,t.jsx)(r.p,{children:"Gets the current CPU usage percentage."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:'use catp2p::benchmark::cpu;\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let usage = cpu::get_cpu_usage()?;\n    println!("Current CPU usage: {:.2}%", usage);\n    Ok(())\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"benchmark-functions",children:"Benchmark Functions"}),"\n",(0,t.jsx)(r.h4,{id:"run_cpu_benchmark---resultf64-error",children:(0,t.jsx)(r.code,{children:"run_cpu_benchmark() -> Result<f64, Error>"})}),"\n",(0,t.jsx)(r.p,{children:"Runs a comprehensive CPU benchmark and returns an overall score."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:'use catp2p::benchmark::cpu;\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let score = cpu::run_cpu_benchmark()?;\n    println!("CPU benchmark score: {:.2}", score);\n    Ok(())\n}\n'})}),"\n",(0,t.jsx)(r.h4,{id:"run_single_core_benchmarkiterations-u64---resultstdtimeduration-error",children:(0,t.jsx)(r.code,{children:"run_single_core_benchmark(iterations: u64) -> Result<std::time::Duration, Error>"})}),"\n",(0,t.jsx)(r.p,{children:"Runs a single-core benchmark with the specified number of iterations."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:'use catp2p::benchmark::cpu;\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let iterations = 50_000_000;\n    let duration = cpu::run_single_core_benchmark(iterations)?;\n    println!("Single-core benchmark took: {:?}", duration);\n    Ok(())\n}\n'})}),"\n",(0,t.jsx)(r.h4,{id:"run_multi_core_benchmarkthreads-u32-iterations_per_thread-u64---resultstdtimeduration-error",children:(0,t.jsx)(r.code,{children:"run_multi_core_benchmark(threads: u32, iterations_per_thread: u64) -> Result<std::time::Duration, Error>"})}),"\n",(0,t.jsx)(r.p,{children:"Runs a multi-core benchmark with the specified number of threads and iterations per thread."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:'use catp2p::benchmark::cpu;\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let threads = 4;\n    let iterations_per_thread = 50_000_000;\n    let duration = cpu::run_multi_core_benchmark(threads, iterations_per_thread)?;\n    println!("Multi-core benchmark with {} threads took: {:?}", threads, duration);\n    Ok(())\n}\n'})}),"\n",(0,t.jsx)(r.h4,{id:"run_floating_point_benchmarkiterations-u64---resultstdtimeduration-error",children:(0,t.jsx)(r.code,{children:"run_floating_point_benchmark(iterations: u64) -> Result<std::time::Duration, Error>"})}),"\n",(0,t.jsx)(r.p,{children:"Runs a floating-point benchmark with the specified number of iterations."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:'use catp2p::benchmark::cpu;\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let iterations = 10_000_000;\n    let duration = cpu::run_floating_point_benchmark(iterations)?;\n    println!("Floating-point benchmark took: {:?}", duration);\n    Ok(())\n}\n'})}),"\n",(0,t.jsx)(r.h4,{id:"run_integer_benchmarkiterations-u64---resultstdtimeduration-error",children:(0,t.jsx)(r.code,{children:"run_integer_benchmark(iterations: u64) -> Result<std::time::Duration, Error>"})}),"\n",(0,t.jsx)(r.p,{children:"Runs an integer benchmark with the specified number of iterations."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:'use catp2p::benchmark::cpu;\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let iterations = 100_000_000;\n    let duration = cpu::run_integer_benchmark(iterations)?;\n    println!("Integer benchmark took: {:?}", duration);\n    Ok(())\n}\n'})}),"\n",(0,t.jsx)(r.h4,{id:"run_memory_benchmarksize_mb-u32---resultstdtimeduration-error",children:(0,t.jsx)(r.code,{children:"run_memory_benchmark(size_mb: u32) -> Result<std::time::Duration, Error>"})}),"\n",(0,t.jsx)(r.p,{children:"Runs a memory benchmark with the specified amount of memory in megabytes."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:'use catp2p::benchmark::cpu;\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let size_mb = 1024; // 1 GB\n    let duration = cpu::run_memory_benchmark(size_mb)?;\n    println!("Memory benchmark with {} MB took: {:?}", size_mb, duration);\n    Ok(())\n}\n'})}),"\n",(0,t.jsx)(r.h4,{id:"run_averaged_benchmarkf-t-eruns-u32-benchmark_fn-f---resultt-error-where-f-fn---resultt-e-t-stdopsaddoutput--t--stdopsdivoutput--t--fromu32--copy-e-stdfmtdisplay",children:(0,t.jsx)(r.code,{children:"run_averaged_benchmark<F, T, E>(runs: u32, benchmark_fn: F) -> Result<T, Error> where F: Fn() -> Result<T, E>, T: std::ops::Add<Output = T> + std::ops::Div<Output = T> + From<u32> + Copy, E: std::fmt::Display"})}),"\n",(0,t.jsx)(r.p,{children:"Runs a benchmark function multiple times and returns the average result."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:'use catp2p::benchmark::cpu;\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Run the single-core benchmark 3 times and average the results\n    let avg_duration = cpu::run_averaged_benchmark(3, || {\n        cpu::run_single_core_benchmark(10_000_000)\n    })?;\n    \n    println!("Averaged single-core benchmark: {:?}", avg_duration);\n    Ok(())\n}\n'})}),"\n",(0,t.jsx)(r.h4,{id:"run_detailed_cpu_benchmark---resultcpubenchmarkresult-error",children:(0,t.jsx)(r.code,{children:"run_detailed_cpu_benchmark() -> Result<CpuBenchmarkResult, Error>"})}),"\n",(0,t.jsx)(r.p,{children:"Runs a comprehensive CPU benchmark and returns detailed results."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:'use catp2p::benchmark::cpu;\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let result = cpu::run_detailed_cpu_benchmark()?;\n    \n    println!("CPU: {}", result.cpu_info.name);\n    println!("Overall score: {:.2}", result.score);\n    println!("Single-core score: {:.2}", result.single_core_score);\n    println!("Multi-core score: {:.2}", result.multi_core_score);\n    println!("Floating-point score: {:.2}", result.floating_point_score);\n    println!("Integer score: {:.2}", result.integer_score);\n    println!("Memory score: {:.2}", result.memory_score);\n    \n    Ok(())\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsxs)(r.p,{children:["All functions that return a ",(0,t.jsx)(r.code,{children:"Result"})," can produce the following errors:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"Error::Benchmark"}),": Indicates an error during CPU benchmarking"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"Error::Timeout"}),": Indicates that a CPU operation timed out"]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"Example of proper error handling:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:'use catp2p::benchmark::cpu;\nuse catp2p::error::Error;\n\nfn main() {\n    match cpu::get_cpu_info() {\n        Ok(cpu_info) => {\n            println!("CPU: {}", cpu_info.name);\n        },\n        Err(Error::Benchmark(msg)) => {\n            println!("Benchmark error: {}", msg);\n        },\n        Err(Error::Timeout) => {\n            println!("Operation timed out");\n        },\n        Err(e) => {\n            println!("Other error: {}", e);\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"platform-specific-considerations",children:"Platform-Specific Considerations"}),"\n",(0,t.jsx)(r.h3,{id:"windows",children:"Windows"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Uses Windows Management Instrumentation (WMI) for CPU information"}),"\n",(0,t.jsx)(r.li,{children:"May require administrative privileges for some detailed information"}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"linux",children:"Linux"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["Uses ",(0,t.jsx)(r.code,{children:"/proc/cpuinfo"})," and ",(0,t.jsx)(r.code,{children:"/proc/stat"})," for CPU information"]}),"\n",(0,t.jsxs)(r.li,{children:["May use ",(0,t.jsx)(r.code,{children:"lscpu"})," as a fallback"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"macos",children:"macOS"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["Uses ",(0,t.jsx)(r.code,{children:"sysctl"})," for CPU information"]}),"\n",(0,t.jsx)(r.li,{children:"May have limited access to some low-level CPU details"}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Benchmarks can be CPU-intensive and may affect system performance while running"}),"\n",(0,t.jsx)(r.li,{children:"For accurate results, close other applications before running benchmarks"}),"\n",(0,t.jsx)(r.li,{children:"Benchmark results can vary based on system load, power settings, and thermal conditions"}),"\n",(0,t.jsx)(r.li,{children:"Consider running benchmarks multiple times for more consistent results"}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"related-resources",children:"Related Resources"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"/docs/docs/Benchmarking/cpu-benchmarking",children:"CPU Benchmarking Documentation"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"/docs/Examples/benchmarks/cpu-benchmark-example",children:"CPU Benchmark Examples"})}),"\n"]})]})}function u(e={}){const{wrapper:r}={...(0,c.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>d});var i=n(6540);const t={},c=i.createContext(t);function s(e){const r=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(c.Provider,{value:r},e.children)}}}]);