"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[5152],{7638:(e,r,i)=>{i.r(r),i.d(r,{assets:()=>l,contentTitle:()=>t,default:()=>o,frontMatter:()=>c,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"api/benchmark/drives","title":"Drive Benchmarking API Reference","description":"This page provides detailed API reference for the drive benchmarking functionality in CatP2P.","source":"@site/docs/api/benchmark/drives.md","sourceDirName":"api/benchmark","slug":"/api/benchmark/drives","permalink":"/catp2p/docs/api/benchmark/drives","draft":false,"unlisted":false,"editUrl":"https://github.com/johnnyvillas/catp2p/tree/main/docs-site/docs/api/benchmark/drives.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"CPU Benchmarking API Reference","permalink":"/catp2p/docs/api/benchmark/cpu"},"next":{"title":"Memory Benchmarking API Reference","permalink":"/catp2p/docs/api/benchmark/memory"}}');var d=i(4848),s=i(8453);const c={sidebar_position:2},t="Drive Benchmarking API Reference",l={},h=[{value:"Structures",id:"structures",level:2},{value:"<code>DriveBenchmarkResult</code>",id:"drivebenchmarkresult",level:3},{value:"<code>DriveBenchmarkConfig</code>",id:"drivebenchmarkconfig",level:3},{value:"<code>DriveInfo</code>",id:"driveinfo",level:3},{value:"Functions",id:"functions",level:2},{value:"Information Gathering",id:"information-gathering",level:3},{value:"Performance Testing",id:"performance-testing",level:3},{value:"Function Relationships",id:"function-relationships",level:3},{value:"Parameter Details",id:"parameter-details",level:3},{value:"Understanding Drive Benchmark Results",id:"understanding-drive-benchmark-results",level:2},{value:"Interpreting the Score",id:"interpreting-the-score",level:3},{value:"Typical Performance Ranges",id:"typical-performance-ranges",level:3},{value:"Factors Affecting Benchmark Results",id:"factors-affecting-benchmark-results",level:3},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Safe Temporary File Creation",id:"safe-temporary-file-creation",level:3},{value:"Benchmark Methodology",id:"benchmark-methodology",level:3},{value:"Error Handling",id:"error-handling",level:2}];function a(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(r.header,{children:(0,d.jsx)(r.h1,{id:"drive-benchmarking-api-reference",children:"Drive Benchmarking API Reference"})}),"\n",(0,d.jsx)(r.p,{children:"This page provides detailed API reference for the drive benchmarking functionality in CatP2P."}),"\n",(0,d.jsx)(r.h2,{id:"structures",children:"Structures"}),"\n",(0,d.jsx)(r.h3,{id:"drivebenchmarkresult",children:(0,d.jsx)(r.code,{children:"DriveBenchmarkResult"})}),"\n",(0,d.jsx)(r.p,{children:"Contains detailed information about the results of a drive benchmark."}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"Field"}),(0,d.jsx)(r.th,{children:"Type"}),(0,d.jsx)(r.th,{children:"Description"}),(0,d.jsx)(r.th,{children:"Example Access"})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"path"})}),(0,d.jsx)(r.td,{children:"PathBuf"}),(0,d.jsx)(r.td,{children:"Path to the drive or directory that was benchmarked"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"result.path.display()"})})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"write_speed"})}),(0,d.jsx)(r.td,{children:"f64"}),(0,d.jsx)(r.td,{children:"Write speed in MB/s"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"result.write_speed"})})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"read_speed"})}),(0,d.jsx)(r.td,{children:"f64"}),(0,d.jsx)(r.td,{children:"Read speed in MB/s"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"result.read_speed"})})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"random_access_speed"})}),(0,d.jsx)(r.td,{children:"f64"}),(0,d.jsx)(r.td,{children:"Random access operations per second"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"result.random_access_speed"})})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"overall_score"})}),(0,d.jsx)(r.td,{children:"f64"}),(0,d.jsx)(r.td,{children:"Overall benchmark score (higher is better)"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"result.overall_score"})})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"total_capacity"})}),(0,d.jsx)(r.td,{children:"u64"}),(0,d.jsx)(r.td,{children:"Total capacity of the drive in bytes"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"result.total_capacity"})})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"available_space"})}),(0,d.jsx)(r.td,{children:"u64"}),(0,d.jsx)(r.td,{children:"Available space on the drive in bytes"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"result.available_space"})})]})]})]}),"\n",(0,d.jsx)(r.h3,{id:"drivebenchmarkconfig",children:(0,d.jsx)(r.code,{children:"DriveBenchmarkConfig"})}),"\n",(0,d.jsx)(r.p,{children:"Configuration options for drive benchmarks."}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"Field"}),(0,d.jsx)(r.th,{children:"Type"}),(0,d.jsx)(r.th,{children:"Description"}),(0,d.jsx)(r.th,{children:"Default Value"}),(0,d.jsx)(r.th,{children:"Example Access"})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"file_size_mb"})}),(0,d.jsx)(r.td,{children:"usize"}),(0,d.jsx)(r.td,{children:"Size of the test file in MB"}),(0,d.jsx)(r.td,{children:"100"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"config.file_size_mb"})})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"random_access_ops"})}),(0,d.jsx)(r.td,{children:"usize"}),(0,d.jsx)(r.td,{children:"Number of random access operations to perform"}),(0,d.jsx)(r.td,{children:"1000"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"config.random_access_ops"})})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"include_random_access"})}),(0,d.jsx)(r.td,{children:"bool"}),(0,d.jsx)(r.td,{children:"Whether to include random access test"}),(0,d.jsx)(r.td,{children:"true"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"config.include_random_access"})})]})]})]}),"\n",(0,d.jsx)(r.h3,{id:"driveinfo",children:(0,d.jsx)(r.code,{children:"DriveInfo"})}),"\n",(0,d.jsx)(r.p,{children:"Information about a drive."}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"Field"}),(0,d.jsx)(r.th,{children:"Type"}),(0,d.jsx)(r.th,{children:"Description"}),(0,d.jsx)(r.th,{children:"Example Access"})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"path"})}),(0,d.jsx)(r.td,{children:"PathBuf"}),(0,d.jsx)(r.td,{children:"Path to the drive"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"drive_info.path.display()"})})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"name"})}),(0,d.jsx)(r.td,{children:"String"}),(0,d.jsx)(r.td,{children:"Name of the drive"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"drive_info.name"})})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"total_capacity"})}),(0,d.jsx)(r.td,{children:"u64"}),(0,d.jsx)(r.td,{children:"Total capacity in bytes"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"drive_info.total_capacity"})})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"available_space"})}),(0,d.jsx)(r.td,{children:"u64"}),(0,d.jsx)(r.td,{children:"Available space in bytes"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"drive_info.available_space"})})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"file_system"})}),(0,d.jsx)(r.td,{children:"String"}),(0,d.jsx)(r.td,{children:"File system type (e.g., NTFS, ext4)"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"drive_info.file_system"})})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"is_removable"})}),(0,d.jsx)(r.td,{children:"bool"}),(0,d.jsx)(r.td,{children:"Whether the drive is removable"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"drive_info.is_removable"})})]})]})]}),"\n",(0,d.jsx)(r.h2,{id:"functions",children:"Functions"}),"\n",(0,d.jsx)(r.h3,{id:"information-gathering",children:"Information Gathering"}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"Function"}),(0,d.jsx)(r.th,{children:"Return Type"}),(0,d.jsx)(r.th,{children:"Description"}),(0,d.jsx)(r.th,{children:"Example Usage"}),(0,d.jsx)(r.th,{children:"Possible Errors"})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"get_drives_info()"})}),(0,d.jsx)(r.td,{children:"Vec<DriveInfo>"}),(0,d.jsx)(r.td,{children:"Gets information about all available drives"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"let drives = drives::get_drives_info();"})}),(0,d.jsx)(r.td,{children:"None - returns empty vector if no drives found"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"get_available_drives()"})}),(0,d.jsx)(r.td,{children:"Vec<PathBuf>"}),(0,d.jsx)(r.td,{children:"Gets a list of all available drive paths"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"let drive_paths = drives::get_available_drives();"})}),(0,d.jsx)(r.td,{children:"None - returns empty vector if no drives found"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"get_drive_info(path: &Path)"})}),(0,d.jsx)(r.td,{children:"Result<(u64, u64), Error>"}),(0,d.jsx)(r.td,{children:"Gets capacity and available space for a specific drive"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"let (total, available) = drives::get_drive_info(&path)?;"})}),(0,d.jsx)(r.td,{children:"Drive not found or inaccessible"})]})]})]}),"\n",(0,d.jsx)(r.h3,{id:"performance-testing",children:"Performance Testing"}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"Function"}),(0,d.jsx)(r.th,{children:"Return Type"}),(0,d.jsx)(r.th,{children:"Description"}),(0,d.jsx)(r.th,{children:"Example Usage"}),(0,d.jsx)(r.th,{children:"Performance Impact"})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"run_drive_benchmark()"})}),(0,d.jsx)(r.td,{children:"Result<f64, Error>"}),(0,d.jsx)(r.td,{children:"Runs a benchmark on the system's temp directory"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"let score = drives::run_drive_benchmark()?;"})}),(0,d.jsx)(r.td,{children:"Medium - creates and reads a 100MB file"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"run_drive_benchmark_with_config(target_dir: &Path, config: &DriveBenchmarkConfig)"})}),(0,d.jsx)(r.td,{children:"Result<DriveBenchmarkResult, Error>"}),(0,d.jsx)(r.td,{children:"Runs a benchmark on a specific directory with custom configuration"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"let result = drives::run_drive_benchmark_with_config(&path, &config)?;"})}),(0,d.jsx)(r.td,{children:"Varies based on configuration"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"run_all_drives_benchmark()"})}),(0,d.jsx)(r.td,{children:"Result<Vec<DriveBenchmarkResult>, Error>"}),(0,d.jsx)(r.td,{children:"Benchmarks all available drives with default configuration"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"let results = drives::run_all_drives_benchmark()?;"})}),(0,d.jsx)(r.td,{children:"High - benchmarks all drives"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"run_all_drives_benchmark_with_config(config: &DriveBenchmarkConfig)"})}),(0,d.jsx)(r.td,{children:"Result<Vec<DriveBenchmarkResult>, Error>"}),(0,d.jsx)(r.td,{children:"Benchmarks all available drives with custom configuration"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"let results = drives::run_all_drives_benchmark_with_config(&config)?;"})}),(0,d.jsx)(r.td,{children:"Varies based on configuration"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"run_write_benchmark(file_path: &Path, size_mb: usize)"})}),(0,d.jsx)(r.td,{children:"Result<f64, Error>"}),(0,d.jsx)(r.td,{children:"Runs only the write portion of the benchmark"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"let write_speed = drives::run_write_benchmark(&path, 100)?;"})}),(0,d.jsx)(r.td,{children:"Medium - writes a file of specified size"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"run_read_benchmark(file_path: &Path)"})}),(0,d.jsx)(r.td,{children:"Result<f64, Error>"}),(0,d.jsx)(r.td,{children:"Runs only the read portion of the benchmark"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"let read_speed = drives::run_read_benchmark(&path)?;"})}),(0,d.jsx)(r.td,{children:"Medium - reads an existing file"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"run_random_access_benchmark(file_path: &Path, num_accesses: usize)"})}),(0,d.jsx)(r.td,{children:"Result<f64, Error>"}),(0,d.jsx)(r.td,{children:"Runs only the random access portion of the benchmark"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"let random_speed = drives::run_random_access_benchmark(&path, 1000)?;"})}),(0,d.jsx)(r.td,{children:"Low to Medium - performs random reads"})]})]})]}),"\n",(0,d.jsx)(r.h3,{id:"function-relationships",children:"Function Relationships"}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"Function"}),(0,d.jsx)(r.th,{children:"Related Functions"}),(0,d.jsx)(r.th,{children:"Notes"})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"run_drive_benchmark()"})}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"run_drive_benchmark_with_config()"})}),(0,d.jsx)(r.td,{children:"Simplified version that uses default configuration"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"run_all_drives_benchmark()"})}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"run_all_drives_benchmark_with_config()"})}),(0,d.jsx)(r.td,{children:"Simplified version that uses default configuration"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"run_drive_benchmark_with_config()"})}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"run_write_benchmark()"}),", ",(0,d.jsx)(r.code,{children:"run_read_benchmark()"}),", ",(0,d.jsx)(r.code,{children:"run_random_access_benchmark()"})]}),(0,d.jsx)(r.td,{children:"Combines all three benchmark types"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"get_drives_info()"})}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"get_available_drives()"}),", ",(0,d.jsx)(r.code,{children:"get_drive_info()"})]}),(0,d.jsxs)(r.td,{children:["Provides more detailed information than ",(0,d.jsx)(r.code,{children:"get_available_drives()"})]})]})]})]}),"\n",(0,d.jsx)(r.h3,{id:"parameter-details",children:"Parameter Details"}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"Function"}),(0,d.jsx)(r.th,{children:"Parameter"}),(0,d.jsx)(r.th,{children:"Description"}),(0,d.jsx)(r.th,{children:"Recommended Values"})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"run_drive_benchmark_with_config()"})}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"target_dir"})}),(0,d.jsx)(r.td,{children:"Directory to benchmark"}),(0,d.jsx)(r.td,{children:"Any directory with write permissions"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"run_drive_benchmark_with_config()"})}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"config"})}),(0,d.jsx)(r.td,{children:"Benchmark configuration"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"DriveBenchmarkConfig::default()"})," or custom"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"run_write_benchmark()"})}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"file_path"})}),(0,d.jsx)(r.td,{children:"Path to create test file"}),(0,d.jsx)(r.td,{children:"Temporary file in writable directory"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"run_write_benchmark()"})}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"size_mb"})}),(0,d.jsx)(r.td,{children:"Size of test file in MB"}),(0,d.jsx)(r.td,{children:"50-500 (larger for more accurate results)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"run_random_access_benchmark()"})}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"num_accesses"})}),(0,d.jsx)(r.td,{children:"Number of random reads"}),(0,d.jsx)(r.td,{children:"500-5000 (more for more accurate results)"})]})]})]}),"\n",(0,d.jsx)(r.h2,{id:"understanding-drive-benchmark-results",children:"Understanding Drive Benchmark Results"}),"\n",(0,d.jsx)(r.p,{children:"The drive benchmark in CatP2P measures several aspects of storage performance:"}),"\n",(0,d.jsxs)(r.ol,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"Write Speed"}),": How quickly data can be written to the drive (in MB/s)"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"Read Speed"}),": How quickly data can be read from the drive (in MB/s)"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"Random Access Speed"}),": How many random access operations can be performed per second"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"interpreting-the-score",children:"Interpreting the Score"}),"\n",(0,d.jsx)(r.p,{children:"The overall drive benchmark score is a composite value that represents:"}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsx)(r.li,{children:"Higher scores indicate better drive performance"}),"\n",(0,d.jsxs)(r.li,{children:["Scores are influenced by:","\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsx)(r.li,{children:"Drive technology (SSD vs HDD)"}),"\n",(0,d.jsx)(r.li,{children:"Interface type (SATA, NVMe, USB)"}),"\n",(0,d.jsx)(r.li,{children:"Drive age and health"}),"\n",(0,d.jsx)(r.li,{children:"File system type and fragmentation"}),"\n",(0,d.jsx)(r.li,{children:"System load during testing"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"typical-performance-ranges",children:"Typical Performance Ranges"}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"Drive Type"}),(0,d.jsx)(r.th,{children:"Typical Write Speed"}),(0,d.jsx)(r.th,{children:"Typical Read Speed"}),(0,d.jsx)(r.th,{children:"Typical Random Access"}),(0,d.jsx)(r.th,{children:"Expected Score Range"})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"NVMe SSD"}),(0,d.jsx)(r.td,{children:"1000-3500 MB/s"}),(0,d.jsx)(r.td,{children:"2000-7000 MB/s"}),(0,d.jsx)(r.td,{children:"200,000+ ops/s"}),(0,d.jsx)(r.td,{children:"100,000+"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"SATA SSD"}),(0,d.jsx)(r.td,{children:"300-550 MB/s"}),(0,d.jsx)(r.td,{children:"500-600 MB/s"}),(0,d.jsx)(r.td,{children:"80,000-150,000 ops/s"}),(0,d.jsx)(r.td,{children:"30,000-80,000"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"7200 RPM HDD"}),(0,d.jsx)(r.td,{children:"80-160 MB/s"}),(0,d.jsx)(r.td,{children:"100-180 MB/s"}),(0,d.jsx)(r.td,{children:"300-500 ops/s"}),(0,d.jsx)(r.td,{children:"5,000-15,000"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"External USB 3.0"}),(0,d.jsx)(r.td,{children:"40-120 MB/s"}),(0,d.jsx)(r.td,{children:"80-250 MB/s"}),(0,d.jsx)(r.td,{children:"1,000-10,000 ops/s"}),(0,d.jsx)(r.td,{children:"3,000-25,000"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"External USB 2.0"}),(0,d.jsx)(r.td,{children:"20-35 MB/s"}),(0,d.jsx)(r.td,{children:"25-40 MB/s"}),(0,d.jsx)(r.td,{children:"500-1,000 ops/s"}),(0,d.jsx)(r.td,{children:"1,000-5,000"})]})]})]}),"\n",(0,d.jsx)(r.p,{children:"Note: Actual performance can vary significantly based on specific hardware, system conditions, and benchmark parameters."}),"\n",(0,d.jsx)(r.h3,{id:"factors-affecting-benchmark-results",children:"Factors Affecting Benchmark Results"}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"Factor"}),(0,d.jsx)(r.th,{children:"Impact"}),(0,d.jsx)(r.th,{children:"Notes"})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"System Activity"}),(0,d.jsx)(r.td,{children:"High"}),(0,d.jsx)(r.td,{children:"Other processes using the drive can significantly reduce benchmark scores"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"Drive Fullness"}),(0,d.jsx)(r.td,{children:"Medium"}),(0,d.jsx)(r.td,{children:"SSDs in particular may slow down as they fill up"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"TRIM Status (SSD)"}),(0,d.jsx)(r.td,{children:"Medium"}),(0,d.jsx)(r.td,{children:"SSDs that haven't been TRIMmed recently may show lower performance"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"Thermal Throttling"}),(0,d.jsx)(r.td,{children:"Medium"}),(0,d.jsx)(r.td,{children:"Drives may slow down if they overheat during benchmarking"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"File System"}),(0,d.jsx)(r.td,{children:"Low to Medium"}),(0,d.jsx)(r.td,{children:"Different file systems have different performance characteristics"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"Drive Fragmentation"}),(0,d.jsx)(r.td,{children:"Low to High"}),(0,d.jsx)(r.td,{children:"Heavily fragmented HDDs will show significantly worse performance"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"Benchmark File Size"}),(0,d.jsx)(r.td,{children:"Medium"}),(0,d.jsx)(r.td,{children:"Larger test files generally provide more accurate results"})]})]})]}),"\n",(0,d.jsx)(r.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,d.jsx)(r.h3,{id:"safe-temporary-file-creation",children:"Safe Temporary File Creation"}),"\n",(0,d.jsx)(r.p,{children:"The drive benchmarking functionality includes a robust mechanism for creating temporary files that works across different operating systems and permission models:"}),"\n",(0,d.jsxs)(r.ol,{children:["\n",(0,d.jsx)(r.li,{children:"First tries to use existing temp directories on the drive"}),"\n",(0,d.jsx)(r.li,{children:"Falls back to creating a dedicated temp directory if needed"}),"\n",(0,d.jsx)(r.li,{children:"Uses the system's temp directory as a last resort"}),"\n",(0,d.jsx)(r.li,{children:"Includes proper error handling and cleanup"}),"\n"]}),"\n",(0,d.jsx)(r.p,{children:"This approach ensures that benchmarks can run successfully even on drives with restricted permissions, such as system drives."}),"\n",(0,d.jsx)(r.h3,{id:"benchmark-methodology",children:"Benchmark Methodology"}),"\n",(0,d.jsx)(r.p,{children:"The benchmark process follows these steps:"}),"\n",(0,d.jsxs)(r.ol,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"Write Test"}),": Creates a file of specified size with random data and measures the time taken"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"Read Test"}),": Reads the entire file sequentially and measures the time taken"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"Random Access Test"})," (optional): Performs random reads at different positions in the file"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"Cleanup"}),": Removes the temporary file"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"Score Calculation"}),": Computes a weighted average of the three metrics"]}),"\n"]}),"\n",(0,d.jsx)(r.p,{children:"The methodology is designed to provide a balanced assessment of drive performance for typical application workloads."}),"\n",(0,d.jsx)(r.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,d.jsxs)(r.p,{children:["The drive benchmarking functions use Rust's ",(0,d.jsx)(r.code,{children:"Result"})," type to handle errors gracefully. Common errors include:"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.code,{children:'Error::Benchmark("Failed to create file: {error}")'}),": Permission issues or disk full"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.code,{children:'Error::Benchmark("Failed to write to file: {error}")'}),": I/O errors during write"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.code,{children:'Error::Benchmark("Failed to read from file: {error}")'}),": I/O errors during read"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.code,{children:'Error::Benchmark("Failed to get drive information: {error}")'}),": System API errors"]}),"\n"]}),"\n",(0,d.jsx)(r.p,{children:"When benchmarking multiple drives, the library will continue even if some drives fail, returning results for the drives that succeeded."})]})}function o(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,d.jsx)(r,{...e,children:(0,d.jsx)(a,{...e})}):a(e)}},8453:(e,r,i)=>{i.d(r,{R:()=>c,x:()=>t});var n=i(6540);const d={},s=n.createContext(d);function c(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function t(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:c(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);