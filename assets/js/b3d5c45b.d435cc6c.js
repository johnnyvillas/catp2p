"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[9967],{4147:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"guides/cpu-benchmarking","title":"CPU Benchmarking","description":"CatP2P provides comprehensive CPU benchmarking capabilities to help you understand your system\'s processing power. This is crucial for distributed computing tasks that may require significant CPU resources.","source":"@site/docs/guides/cpu-benchmarking.md","sourceDirName":"guides","slug":"/guides/cpu-benchmarking","permalink":"/catp2p/docs/guides/cpu-benchmarking","draft":false,"unlisted":false,"editUrl":"https://github.com/johnnyvillas/catp2p/tree/main/docs-site/docs/guides/cpu-benchmarking.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Guides","permalink":"/catp2p/docs/category/guides"}}');var s=r(4848),i=r(8453);const o={sidebar_position:1},c="CPU Benchmarking",a={},l=[{value:"CPU Information vs. Performance Testing",id:"cpu-information-vs-performance-testing",level:2},{value:"Getting CPU Information",id:"getting-cpu-information",level:2},{value:"Running CPU Performance Benchmarks",id:"running-cpu-performance-benchmarks",level:2},{value:"Single-Core vs. Multi-Core Performance",id:"single-core-vs-multi-core-performance",level:2},{value:"Understanding CPU Benchmark Results",id:"understanding-cpu-benchmark-results",level:2},{value:"Interpreting the Score",id:"interpreting-the-score",level:3},{value:"Comparing Single-Core vs. Multi-Core Results",id:"comparing-single-core-vs-multi-core-results",level:3},{value:"Complete CPU Benchmarking Example",id:"complete-cpu-benchmarking-example",level:2},{value:"Using CPU Benchmark Results",id:"using-cpu-benchmark-results",level:2},{value:"Step 6: Update the Cargo.toml to Include the Example",id:"step-6-update-the-cargotoml-to-include-the-example",level:3},{value:"Step 7: Update the Introduction Page",id:"step-7-update-the-introduction-page",level:3},{value:"Basic Usage",id:"basic-usage",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"cpu-benchmarking",children:"CPU Benchmarking"})}),"\n",(0,s.jsx)(n.p,{children:"CatP2P provides comprehensive CPU benchmarking capabilities to help you understand your system's processing power. This is crucial for distributed computing tasks that may require significant CPU resources."}),"\n",(0,s.jsx)(n.h2,{id:"cpu-information-vs-performance-testing",children:"CPU Information vs. Performance Testing"}),"\n",(0,s.jsx)(n.p,{children:"CatP2P offers two approaches to CPU assessment:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Information Gathering"}),": Extracting CPU details like core count and current usage without running performance tests"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Performance Testing"}),": Running actual computations to measure real-world performance"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"getting-cpu-information",children:"Getting CPU Information"}),"\n",(0,s.jsxs)(n.p,{children:["You can quickly retrieve basic CPU information using the ",(0,s.jsx)(n.code,{children:"ResourceMonitor"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use catp2p::resources::monitor::ResourceMonitor;\n\n// Create a resource monitor\nlet mut resource_monitor = ResourceMonitor::new_with_default_interval();\n\n// Get current system resources\nlet system_resources = resource_monitor.get_current_resources();\n\n// Access CPU information\nprintln!("CPU Cores: {}", system_resources.cpu_cores);\nprintln!("Current CPU Usage: {:.2}%", system_resources.cpu_usage);\n'})}),"\n",(0,s.jsx)(n.h2,{id:"running-cpu-performance-benchmarks",children:"Running CPU Performance Benchmarks"}),"\n",(0,s.jsx)(n.p,{children:"For a comprehensive assessment of CPU performance, you can use the benchmarking functions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use catp2p::benchmark::cpu;\nuse catp2p::error::Error;\n\nfn main() -> Result<(), Error> {\n    // Run the overall CPU benchmark\n    let cpu_score = cpu::run_cpu_benchmark()?;\n    println!("CPU Benchmark Score: {:.2}", cpu_score);\n    \n    // The score represents overall CPU performance\n    // Higher scores indicate better performance\n    \n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"single-core-vs-multi-core-performance",children:"Single-Core vs. Multi-Core Performance"}),"\n",(0,s.jsx)(n.p,{children:"CatP2P allows you to test both single-core and multi-core performance:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use catp2p::benchmark::cpu;\nuse catp2p::error::Error;\n\nfn main() -> Result<(), Error> {\n    // Test single-core performance with different workloads\n    let iterations = 50_000_000;\n    let duration = cpu::run_single_core_benchmark(iterations)?;\n    println!("Single-core time: {:?}", duration);\n    \n    // Test multi-core performance with different thread counts\n    let threads = 4; // Use 4 CPU cores\n    let iterations_per_thread = 50_000_000;\n    let duration = cpu::run_multi_core_benchmark(threads, iterations_per_thread)?;\n    println!("Multi-core time with {} threads: {:?}", threads, duration);\n    \n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"understanding-cpu-benchmark-results",children:"Understanding CPU Benchmark Results"}),"\n",(0,s.jsx)(n.p,{children:"The CPU benchmark in CatP2P measures several aspects of CPU performance:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Raw computational power"}),": How quickly your CPU can perform calculations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Multi-threading efficiency"}),": How well performance scales with multiple cores"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Workload handling"}),": Performance under different types of computational tasks"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"interpreting-the-score",children:"Interpreting the Score"}),"\n",(0,s.jsx)(n.p,{children:"The overall CPU benchmark score is a composite value that represents:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Higher scores indicate better CPU performance"}),"\n",(0,s.jsxs)(n.li,{children:["Scores are influenced by:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Number of CPU cores"}),"\n",(0,s.jsx)(n.li,{children:"CPU clock speed"}),"\n",(0,s.jsx)(n.li,{children:"CPU architecture and efficiency"}),"\n",(0,s.jsx)(n.li,{children:"Multi-threading capabilities"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"comparing-single-core-vs-multi-core-results",children:"Comparing Single-Core vs. Multi-Core Results"}),"\n",(0,s.jsx)(n.p,{children:"By comparing single-core and multi-core benchmark results, you can understand:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The raw power of each CPU core"}),"\n",(0,s.jsx)(n.li,{children:"How efficiently your CPU scales with multiple threads"}),"\n",(0,s.jsx)(n.li,{children:"The optimal number of threads for your specific CPU"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"complete-cpu-benchmarking-example",children:"Complete CPU Benchmarking Example"}),"\n",(0,s.jsx)(n.p,{children:"Here's a complete example that demonstrates all CPU benchmarking capabilities:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use catp2p::benchmark::cpu;\nuse catp2p::error::Error;\nuse catp2p::resources::monitor::ResourceMonitor;\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    // Get CPU information\n    let mut resource_monitor = ResourceMonitor::new_with_default_interval();\n    let system_resources = resource_monitor.get_current_resources();\n    \n    println!("CPU Cores: {}", system_resources.cpu_cores);\n    println!("Current CPU Usage: {:.2}%", system_resources.cpu_usage);\n    \n    // Run overall CPU benchmark\n    let cpu_score = cpu::run_cpu_benchmark()?;\n    println!("CPU Benchmark Score: {:.2}", cpu_score);\n    \n    // Run single-core benchmark\n    let iterations = 50_000_000;\n    let duration = cpu::run_single_core_benchmark(iterations)?;\n    println!("Single-core benchmark: {:?}", duration);\n    \n    // Run multi-core benchmark with different thread counts\n    let max_cores = system_resources.cpu_cores as usize;\n    let iterations_per_thread = 50_000_000;\n    \n    for cores in [1, 2, 4, max_cores.min(8) as usize] {\n        if cores > max_cores as usize {\n            continue;\n        }\n        \n        let duration = cpu::run_multi_core_benchmark(cores, iterations_per_thread)?;\n        println!("Multi-core benchmark ({} cores): {:?}", cores, duration);\n    }\n    \n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"using-cpu-benchmark-results",children:"Using CPU Benchmark Results"}),"\n",(0,s.jsx)(n.p,{children:"The results from CPU benchmarking can help you:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Determine if your system is suitable for CPU-intensive distributed tasks"}),"\n",(0,s.jsx)(n.li,{children:"Configure optimal thread counts for parallel processing"}),"\n",(0,s.jsx)(n.li,{children:"Compare your node's capabilities with other nodes in the network"}),"\n",(0,s.jsx)(n.li,{children:"Set appropriate CPU resource limits in your CatP2P configuration"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\n### Step 5: Create the Example File\n\n```bash\nmkdir -p catp2p/examples\ntouch catp2p/examples/cpu_benchmark.rs\n"})}),"\n",(0,s.jsx)(n.p,{children:"Add the example code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'// examples/cpu_benchmark.rs\nuse catp2p::benchmark::cpu;\nuse catp2p::error::Error;\nuse catp2p::resources::monitor::ResourceMonitor;\nuse std::time::Duration;\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    println!("=== CatP2P CPU Information and Benchmarking ===\\n");\n    \n    // Part 1: Get CPU information without performance testing\n    println!("--- CPU Information ---");\n    \n    // Create a resource monitor to get CPU details\n    let mut resource_monitor = ResourceMonitor::new_with_default_interval();\n    let system_resources = resource_monitor.get_current_resources();\n    \n    println!("CPU Cores: {}", system_resources.cpu_cores);\n    println!("Current CPU Usage: {:.2}%", system_resources.cpu_usage);\n    \n    // Part 2: Run performance benchmarks\n    println!("\\n--- CPU Performance Benchmark ---");\n    println!("Running CPU benchmark...");\n    \n    // Run the CPU benchmark\n    let cpu_score = cpu::run_cpu_benchmark()?;\n    println!("CPU Benchmark Score: {:.2}", cpu_score);\n    \n    // Part 3: Run single-core benchmark with different workloads\n    println!("\\n--- Single Core Performance ---");\n    \n    let iterations = [1_000_000, 10_000_000, 100_000_000];\n    for &iter in &iterations {\n        let duration = cpu::run_single_core_benchmark(iter)?;\n        println!(\n            "Single-core benchmark ({} iterations): {:.2} ms", \n            iter, \n            duration.as_millis()\n        );\n    }\n    \n    // Part 4: Run multi-core benchmark with different thread counts\n    println!("\\n--- Multi-Core Scaling ---");\n    \n    // Get available CPU cores\n    let max_cores = num_cpus::get();\n    let core_counts = [1, 2, 4, max_cores.min(8), max_cores];\n    \n    // Use a fixed workload per thread\n    let iterations_per_thread = 50_000_000;\n    \n    for &cores in &core_counts {\n        if cores > max_cores {\n            continue;\n        }\n        \n        let duration = cpu::run_multi_core_benchmark(cores, iterations_per_thread)?;\n        println!(\n            "Multi-core benchmark ({} cores): {:.2} ms", \n            cores, \n            duration.as_millis()\n        );\n    }\n    \n    println!("\\nCPU benchmarking completed!");\n    \n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-6-update-the-cargotoml-to-include-the-example",children:"Step 6: Update the Cargo.toml to Include the Example"}),"\n",(0,s.jsx)(n.p,{children:"Make sure the example is properly registered in your Cargo.toml:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'[[example]]\nname = "cpu_benchmark"\npath = "examples/cpu_benchmark.rs"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-7-update-the-introduction-page",children:"Step 7: Update the Introduction Page"}),"\n",(0,s.jsx)(n.p,{children:"Let's also update the introduction page to mention our new documentation:"}),"\n",(0,s.jsxs)(n.p,{children:["Edit ",(0,s.jsx)(n.code,{children:"catp2p/docs-site/docs/intro.md"})," to include a reference to our new guides:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:'---\nsidebar_position: 1\n---\n\n# Introduction to CatP2P\n\nCatP2P is a high-performance peer-to-peer library for distributed computing, written in Rust.\n\n## Features\n\n- **P2P Networking**: Built on libp2p for robust peer discovery and communication\n- **Task Distribution**: Efficiently distribute and execute tasks across the network\n- **Resource Management**: Monitor and allocate CPU, GPU, memory, and storage resources\n- **Benchmarking**: Assess node capabilities for optimal task allocation\n- **Local Storage**: Persistent storage for task logs and peer interactions\n- **Scoring System**: Track contributions and allocate rewards\n\n## Getting Started\n\nCheck out our guides to learn how to use CatP2P:\n\n- [CPU Benchmarking](./guides/cpu-benchmarking.md): Learn how to benchmark CPU performance\n- More guides coming soon!\n\n## Installation\n\nAdd catp2p to your Cargo.toml:\n\n```toml\n[dependencies]\ncatp2p = "0.1.0"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"use catp2p::CatP2P;\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Create a new CatP2P instance with default configuration\n    let mut node = CatP2P::new()?;\n    \n    // Start the node\n    node.start()?;\n    \n    // The node is now running and will discover peers and process tasks\n    \n    // When done, stop the node\n    node.stop()?;\n    \n    Ok(())\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\n### Step 8: Test the Documentation\n\nTo test your Docusaurus site locally:\n\n```bash\ncd catp2p/docs-site\nnpm start\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>c});var t=r(6540);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);