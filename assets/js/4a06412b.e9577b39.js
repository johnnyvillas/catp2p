"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[4657],{8453:(e,n,r)=>{r.d(n,{R:()=>d,x:()=>c});var i=r(6540);const t={},s=i.createContext(t);function d(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),i.createElement(s.Provider,{value:n},e.children)}},9682:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>a,frontMatter:()=>d,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"api/benchmark/gpu","title":"GPU Benchmarking API Reference","description":"This page provides detailed API reference for the GPU benchmarking functionality in CatP2P.","source":"@site/docs/api/benchmark/gpu.md","sourceDirName":"api/benchmark","slug":"/api/benchmark/gpu","permalink":"/catp2p/docs/api/benchmark/gpu","draft":false,"unlisted":false,"editUrl":"https://github.com/johnnyvillas/catp2p/tree/main/docs-site/docs/api/benchmark/gpu.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Memory Benchmarking API Reference","permalink":"/catp2p/docs/api/benchmark/memory"},"next":{"title":"Tutorial - Extras","permalink":"/catp2p/docs/category/tutorial---extras"}}');var t=r(4848),s=r(8453);const d={sidebar_position:3},c="GPU Benchmarking API Reference",l={},h=[{value:"Structures",id:"structures",level:2},{value:"<code>GpuBenchmarkContext</code>",id:"gpubenchmarkcontext",level:3},{value:"<code>GpuBenchmarkResult</code>",id:"gpubenchmarkresult",level:3},{value:"<code>GpuTestResult</code>",id:"gputestresult",level:3},{value:"<code>GpuBenchmarkConfig</code>",id:"gpubenchmarkconfig",level:3},{value:"<code>GpuInfo</code>",id:"gpuinfo",level:3},{value:"Functions",id:"functions",level:2},{value:"Context Management",id:"context-management",level:3},{value:"Information Gathering",id:"information-gathering",level:3},{value:"Performance Testing",id:"performance-testing",level:3},{value:"Understanding GPU Benchmark Results",id:"understanding-gpu-benchmark-results",level:2},{value:"Matrix Multiplication Benchmark",id:"matrix-multiplication-benchmark",level:3},{value:"Activation Functions Benchmark",id:"activation-functions-benchmark",level:3},{value:"Interpreting the Score",id:"interpreting-the-score",level:3},{value:"Typical Performance Ranges",id:"typical-performance-ranges",level:3},{value:"Factors Affecting Benchmark Results",id:"factors-affecting-benchmark-results",level:3},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Matrix Multiplication Benchmark",id:"matrix-multiplication-benchmark-1",level:3},{value:"Activation Functions Benchmark",id:"activation-functions-benchmark-1",level:3},{value:"Resource Management",id:"resource-management",level:3},{value:"Graphics API Selection",id:"graphics-api-selection",level:3},{value:"Error Handling",id:"error-handling",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"gpu-benchmarking-api-reference",children:"GPU Benchmarking API Reference"})}),"\n",(0,t.jsx)(n.p,{children:"This page provides detailed API reference for the GPU benchmarking functionality in CatP2P."}),"\n",(0,t.jsx)(n.h2,{id:"structures",children:"Structures"}),"\n",(0,t.jsx)(n.h3,{id:"gpubenchmarkcontext",children:(0,t.jsx)(n.code,{children:"GpuBenchmarkContext"})}),"\n",(0,t.jsx)(n.p,{children:"A context for GPU benchmarks that manages GPU resources and allows reusing them across multiple benchmarks."}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Example Access"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"gpu_info"})}),(0,t.jsx)(n.td,{children:"GpuInfo"}),(0,t.jsx)(n.td,{children:"Information about the GPU"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"context.gpu_info.name"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"adapter"})}),(0,t.jsx)(n.td,{children:"Adapter"}),(0,t.jsx)(n.td,{children:"GPU adapter"}),(0,t.jsx)(n.td,{children:"(internal use)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"device"})}),(0,t.jsx)(n.td,{children:"Device"}),(0,t.jsx)(n.td,{children:"GPU device"}),(0,t.jsx)(n.td,{children:"(internal use)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"queue"})}),(0,t.jsx)(n.td,{children:"Queue"}),(0,t.jsx)(n.td,{children:"GPU command queue"}),(0,t.jsx)(n.td,{children:"(internal use)"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"gpubenchmarkresult",children:(0,t.jsx)(n.code,{children:"GpuBenchmarkResult"})}),"\n",(0,t.jsx)(n.p,{children:"Contains detailed information about the results of a GPU benchmark."}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Example Access"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"gpu_model"})}),(0,t.jsx)(n.td,{children:"String"}),(0,t.jsx)(n.td,{children:"GPU model name"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"result.gpu_model"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"gpu_vendor"})}),(0,t.jsx)(n.td,{children:"String"}),(0,t.jsx)(n.td,{children:"GPU vendor"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"result.gpu_vendor"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"vram_estimate"})}),(0,t.jsx)(n.td,{children:"String"}),(0,t.jsx)(n.td,{children:"Estimated VRAM in GB"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"result.vram_estimate"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"compute_score"})}),(0,t.jsx)(n.td,{children:"f64"}),(0,t.jsx)(n.td,{children:"Compute performance score (MFLOPS)"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"result.compute_score"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"texture_score"})}),(0,t.jsx)(n.td,{children:"f64"}),(0,t.jsx)(n.td,{children:"Texture sampling performance score"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"result.texture_score"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"geometry_score"})}),(0,t.jsx)(n.td,{children:"f64"}),(0,t.jsx)(n.td,{children:"Geometry processing performance score"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"result.geometry_score"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"memory_score"})}),(0,t.jsx)(n.td,{children:"f64"}),(0,t.jsx)(n.td,{children:"Memory bandwidth performance score"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"result.memory_score"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"overall_score"})}),(0,t.jsx)(n.td,{children:"f64"}),(0,t.jsx)(n.td,{children:"Overall benchmark score (higher is better)"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"result.overall_score"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"average_fps"})}),(0,t.jsx)(n.td,{children:"f64"}),(0,t.jsx)(n.td,{children:"Average frames per second across all tests"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"result.average_fps"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"test_results"})}),(0,t.jsx)(n.td,{children:"Vec<GpuTestResult>"}),(0,t.jsx)(n.td,{children:"Detailed results for each test"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"result.test_results[0].score"})})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"gputestresult",children:(0,t.jsx)(n.code,{children:"GpuTestResult"})}),"\n",(0,t.jsx)(n.p,{children:"Contains detailed information about the results of a specific GPU test."}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Example Access"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"test_name"})}),(0,t.jsx)(n.td,{children:"String"}),(0,t.jsx)(n.td,{children:"Name of the test"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"test_result.test_name"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"average_fps"})}),(0,t.jsx)(n.td,{children:"f64"}),(0,t.jsx)(n.td,{children:"Average frames per second"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"test_result.average_fps"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"min_fps"})}),(0,t.jsx)(n.td,{children:"f64"}),(0,t.jsx)(n.td,{children:"Minimum frames per second"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"test_result.min_fps"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"max_fps"})}),(0,t.jsx)(n.td,{children:"f64"}),(0,t.jsx)(n.td,{children:"Maximum frames per second"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"test_result.max_fps"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"score"})}),(0,t.jsx)(n.td,{children:"f64"}),(0,t.jsx)(n.td,{children:"Test score in MFLOPS (higher is better)"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"test_result.score"})})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"gpubenchmarkconfig",children:(0,t.jsx)(n.code,{children:"GpuBenchmarkConfig"})}),"\n",(0,t.jsx)(n.p,{children:"Configuration options for GPU benchmarks."}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Default Value"}),(0,t.jsx)(n.th,{children:"Example Access"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"test_duration_secs"})}),(0,t.jsx)(n.td,{children:"u64"}),(0,t.jsx)(n.td,{children:"Duration of each test in seconds"}),(0,t.jsx)(n.td,{children:"5"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"config.test_duration_secs"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"include_compute_test"})}),(0,t.jsx)(n.td,{children:"bool"}),(0,t.jsx)(n.td,{children:"Whether to include compute test"}),(0,t.jsx)(n.td,{children:"true"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"config.include_compute_test"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"include_texture_test"})}),(0,t.jsx)(n.td,{children:"bool"}),(0,t.jsx)(n.td,{children:"Whether to include texture test"}),(0,t.jsx)(n.td,{children:"true"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"config.include_texture_test"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"include_geometry_test"})}),(0,t.jsx)(n.td,{children:"bool"}),(0,t.jsx)(n.td,{children:"Whether to include geometry test"}),(0,t.jsx)(n.td,{children:"true"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"config.include_geometry_test"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"include_memory_test"})}),(0,t.jsx)(n.td,{children:"bool"}),(0,t.jsx)(n.td,{children:"Whether to include memory test"}),(0,t.jsx)(n.td,{children:"true"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"config.include_memory_test"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"complexity"})}),(0,t.jsx)(n.td,{children:"u32"}),(0,t.jsx)(n.td,{children:"Test complexity (1-10) affecting matrix size"}),(0,t.jsx)(n.td,{children:"5"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"config.complexity"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"window_width"})}),(0,t.jsx)(n.td,{children:"u32"}),(0,t.jsx)(n.td,{children:"Width of benchmark window"}),(0,t.jsx)(n.td,{children:"800"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"config.window_width"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"window_height"})}),(0,t.jsx)(n.td,{children:"u32"}),(0,t.jsx)(n.td,{children:"Height of benchmark window"}),(0,t.jsx)(n.td,{children:"600"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"config.window_height"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"show_window"})}),(0,t.jsx)(n.td,{children:"bool"}),(0,t.jsx)(n.td,{children:"Whether to show the benchmark window"}),(0,t.jsx)(n.td,{children:"false"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"config.show_window"})})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"gpuinfo",children:(0,t.jsx)(n.code,{children:"GpuInfo"})}),"\n",(0,t.jsx)(n.p,{children:"Information about a GPU."}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Example Access"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"name"})}),(0,t.jsx)(n.td,{children:"String"}),(0,t.jsx)(n.td,{children:"GPU model name"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"gpu_info.name"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"vendor"})}),(0,t.jsx)(n.td,{children:"String"}),(0,t.jsx)(n.td,{children:"GPU vendor"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"gpu_info.vendor"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"driver"})}),(0,t.jsx)(n.td,{children:"String"}),(0,t.jsx)(n.td,{children:"GPU driver version"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"gpu_info.driver"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"vram"})}),(0,t.jsx)(n.td,{children:"String"}),(0,t.jsx)(n.td,{children:"Estimated VRAM"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"gpu_info.vram"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"backend"})}),(0,t.jsx)(n.td,{children:"String"}),(0,t.jsx)(n.td,{children:"Graphics API backend"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"gpu_info.backend"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"is_integrated"})}),(0,t.jsx)(n.td,{children:"bool"}),(0,t.jsx)(n.td,{children:"Whether the GPU is integrated"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"gpu_info.is_integrated"})})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,t.jsx)(n.h3,{id:"context-management",children:"Context Management"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Function"}),(0,t.jsx)(n.th,{children:"Return Type"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Example Usage"}),(0,t.jsx)(n.th,{children:"Possible Errors"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"GpuBenchmarkContext::new()"})}),(0,t.jsx)(n.td,{children:"Result<GpuBenchmarkContext, Error>"}),(0,t.jsx)(n.td,{children:"Creates a new GPU benchmark context"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"let context = GpuBenchmarkContext::new()?;"})}),(0,t.jsx)(n.td,{children:"No compatible GPU found, device creation failed"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"context.run_matrix_mult(duration, matrix_size)"})}),(0,t.jsx)(n.td,{children:"Result<GpuTestResult, Error>"}),(0,t.jsx)(n.td,{children:"Runs a matrix multiplication benchmark"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"let result = context.run_matrix_mult(Duration::from_secs(5), 1024)?;"})}),(0,t.jsx)(n.td,{children:"Device lost, out of memory"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"context.run_activation_functions(duration, data_size)"})}),(0,t.jsx)(n.td,{children:"Result<GpuTestResult, Error>"}),(0,t.jsx)(n.td,{children:"Runs a neural network activation functions benchmark"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"let result = context.run_activation_functions(Duration::from_secs(2), 1_000_000)?;"})}),(0,t.jsx)(n.td,{children:"Device lost, out of memory"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"information-gathering",children:"Information Gathering"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Function"}),(0,t.jsx)(n.th,{children:"Return Type"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Example Usage"}),(0,t.jsx)(n.th,{children:"Possible Errors"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"get_gpu_info()"})}),(0,t.jsx)(n.td,{children:"Result<GpuInfo, Error>"}),(0,t.jsx)(n.td,{children:"Gets information about the GPU"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"let gpu_info = gpu::get_gpu_info()?;"})}),(0,t.jsx)(n.td,{children:"No compatible GPU found"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"is_gpu_available()"})}),(0,t.jsx)(n.td,{children:"bool"}),(0,t.jsx)(n.td,{children:"Checks if a compatible GPU is available"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"if gpu::is_gpu_available() { ... }"})}),(0,t.jsx)(n.td,{children:"None"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"performance-testing",children:"Performance Testing"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Function"}),(0,t.jsx)(n.th,{children:"Return Type"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Example Usage"}),(0,t.jsx)(n.th,{children:"Performance Impact"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"run_gpu_benchmark()"})}),(0,t.jsx)(n.td,{children:"Result<f64, Error>"}),(0,t.jsx)(n.td,{children:"Runs a benchmark with default settings"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"let score = gpu::run_gpu_benchmark()?;"})}),(0,t.jsx)(n.td,{children:"High - runs matrix multiplication test with default duration"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"run_gpu_benchmark_with_config(config)"})}),(0,t.jsx)(n.td,{children:"Result<GpuBenchmarkResult, Error>"}),(0,t.jsx)(n.td,{children:"Runs a benchmark with custom configuration"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"let result = gpu::run_gpu_benchmark_with_config(&config)?;"})}),(0,t.jsx)(n.td,{children:"Varies based on configuration"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"run_matrix_mult_benchmark(adapter, duration, size)"})}),(0,t.jsx)(n.td,{children:"Result<GpuTestResult, Error>"}),(0,t.jsx)(n.td,{children:"Runs only the matrix multiplication test"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"let result = gpu::run_matrix_mult_benchmark(&adapter, duration, 1024)?;"})}),(0,t.jsx)(n.td,{children:"Medium - runs only matrix multiplication test"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"run_activation_functions_benchmark(adapter, duration, data_size)"})}),(0,t.jsx)(n.td,{children:"Result<GpuTestResult, Error>"}),(0,t.jsx)(n.td,{children:"Runs only the activation functions test"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"let result = gpu::run_activation_functions_benchmark(&adapter, duration, 1_000_000)?;"})}),(0,t.jsx)(n.td,{children:"Medium - runs only activation functions test"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"understanding-gpu-benchmark-results",children:"Understanding GPU Benchmark Results"}),"\n",(0,t.jsx)(n.p,{children:"The GPU benchmark in CatP2P includes two main tests:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Matrix Multiplication"}),": How efficiently the GPU can multiply large matrices"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Neural Network Activation Functions"}),": How efficiently the GPU can compute common activation functions used in neural networks"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"matrix-multiplication-benchmark",children:"Matrix Multiplication Benchmark"}),"\n",(0,t.jsx)(n.p,{children:"This benchmark measures the GPU's ability to perform matrix multiplication operations, which are fundamental to many GPU computing tasks:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Score in MFLOPS"}),": Millions of floating-point operations per second"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Higher scores indicate better GPU compute performance"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Matrix size"}),": Calculated as 512 + (complexity * 128), where complexity ranges from 1 to 10"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"activation-functions-benchmark",children:"Activation Functions Benchmark"}),"\n",(0,t.jsx)(n.p,{children:"This benchmark measures the GPU's ability to compute common neural network activation functions:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Operations tested"}),": ReLU, Sigmoid, Tanh, and Leaky ReLU"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Score"}),": Based on millions of operations per second"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Higher scores indicate better performance for AI and deep learning applications"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"interpreting-the-score",children:"Interpreting the Score"}),"\n",(0,t.jsx)(n.p,{children:"The GPU benchmark score represents:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Higher scores indicate better GPU compute performance"}),"\n",(0,t.jsxs)(n.li,{children:["Scores are influenced by:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"GPU architecture and generation"}),"\n",(0,t.jsx)(n.li,{children:"Number of compute units/cores"}),"\n",(0,t.jsx)(n.li,{children:"Memory bandwidth and capacity"}),"\n",(0,t.jsx)(n.li,{children:"Driver optimization"}),"\n",(0,t.jsx)(n.li,{children:"System configuration"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"typical-performance-ranges",children:"Typical Performance Ranges"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"GPU Type"}),(0,t.jsx)(n.th,{children:"Typical Matrix Multiplication Score (MFLOPS)"}),(0,t.jsx)(n.th,{children:"Expected Performance"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"High-end Desktop GPU"}),(0,t.jsx)(n.td,{children:"5,000,000 - 15,000,000"}),(0,t.jsx)(n.td,{children:"Excellent for complex parallel computing"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Mid-range Desktop GPU"}),(0,t.jsx)(n.td,{children:"1,000,000 - 5,000,000"}),(0,t.jsx)(n.td,{children:"Good for most parallel computing tasks"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Entry-level Desktop GPU"}),(0,t.jsx)(n.td,{children:"200,000 - 1,000,000"}),(0,t.jsx)(n.td,{children:"Suitable for basic parallel computing"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"High-end Integrated GPU"}),(0,t.jsx)(n.td,{children:"50,000 - 200,000"}),(0,t.jsx)(n.td,{children:"Limited parallel computing capability"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Basic Integrated GPU"}),(0,t.jsx)(n.td,{children:"5,000 - 50,000"}),(0,t.jsx)(n.td,{children:"Minimal parallel computing capability"})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"Note: Actual performance can vary significantly based on specific hardware, system conditions, and benchmark parameters."}),"\n",(0,t.jsx)(n.h3,{id:"factors-affecting-benchmark-results",children:"Factors Affecting Benchmark Results"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Factor"}),(0,t.jsx)(n.th,{children:"Impact"}),(0,t.jsx)(n.th,{children:"Notes"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Matrix Size"}),(0,t.jsx)(n.td,{children:"High"}),(0,t.jsx)(n.td,{children:"Larger matrices provide more accurate results but may hit memory limits"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Data Size"}),(0,t.jsx)(n.td,{children:"Medium"}),(0,t.jsx)(n.td,{children:"Larger data sizes for activation functions provide more accurate results"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"System Activity"}),(0,t.jsx)(n.td,{children:"Medium"}),(0,t.jsx)(n.td,{children:"Other processes using the GPU can reduce benchmark scores"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Driver Version"}),(0,t.jsx)(n.td,{children:"Medium"}),(0,t.jsx)(n.td,{children:"Updated drivers can provide performance improvements"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Thermal Throttling"}),(0,t.jsx)(n.td,{children:"High"}),(0,t.jsx)(n.td,{children:"GPUs may slow down if they overheat during benchmarking"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Power Limits"}),(0,t.jsx)(n.td,{children:"Medium"}),(0,t.jsx)(n.td,{children:"Power-limited systems (like laptops) may show lower performance"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"API Overhead"}),(0,t.jsx)(n.td,{children:"Low"}),(0,t.jsx)(n.td,{children:"Different graphics APIs have different overheads"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,t.jsx)(n.h3,{id:"matrix-multiplication-benchmark-1",children:"Matrix Multiplication Benchmark"}),"\n",(0,t.jsx)(n.p,{children:"The matrix multiplication benchmark measures how quickly the GPU can multiply two large matrices:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Two random matrices of size NxN are created (where N is determined by the complexity parameter)"}),"\n",(0,t.jsx)(n.li,{children:"The matrices are uploaded to GPU memory"}),"\n",(0,t.jsx)(n.li,{children:"A compute shader multiplies the matrices"}),"\n",(0,t.jsx)(n.li,{children:"The process is repeated for the specified duration"}),"\n",(0,t.jsx)(n.li,{children:"Performance is measured in MFLOPS (Millions of Floating Point Operations Per Second)"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The matrix size is calculated as: 512 + (complexity * 128), where complexity ranges from 1 to 10."}),"\n",(0,t.jsx)(n.h3,{id:"activation-functions-benchmark-1",children:"Activation Functions Benchmark"}),"\n",(0,t.jsx)(n.p,{children:"The activation functions benchmark measures how quickly the GPU can compute common neural network activation functions:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Random input data of the specified size is created"}),"\n",(0,t.jsx)(n.li,{children:"The data is uploaded to GPU memory"}),"\n",(0,t.jsx)(n.li,{children:"A compute shader applies four activation functions (ReLU, Sigmoid, Tanh, Leaky ReLU) to each element"}),"\n",(0,t.jsx)(n.li,{children:"The process is repeated for the specified duration"}),"\n",(0,t.jsx)(n.li,{children:"Performance is measured in millions of operations per second"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"resource-management",children:"Resource Management"}),"\n",(0,t.jsx)(n.p,{children:"The GPU benchmarking module uses a context-based approach to manage GPU resources:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["A ",(0,t.jsx)(n.code,{children:"GpuBenchmarkContext"})," is created once"]}),"\n",(0,t.jsx)(n.li,{children:"This context holds the GPU device and command queue"}),"\n",(0,t.jsx)(n.li,{children:"Multiple benchmarks can be run using the same context"}),"\n",(0,t.jsx)(n.li,{children:"This approach avoids device creation/destruction overhead and potential driver issues"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"graphics-api-selection",children:"Graphics API Selection"}),"\n",(0,t.jsx)(n.p,{children:"The GPU benchmarking functionality uses wgpu, which automatically selects the best available graphics API:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Vulkan on supported systems (Linux, Windows, Android)"}),"\n",(0,t.jsx)(n.li,{children:"Metal on macOS and iOS"}),"\n",(0,t.jsx)(n.li,{children:"DirectX 12 on Windows"}),"\n",(0,t.jsx)(n.li,{children:"DirectX 11 on older Windows systems"}),"\n",(0,t.jsx)(n.li,{children:"OpenGL as a fallback"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsxs)(n.p,{children:["The GPU benchmarking functions use Rust's ",(0,t.jsx)(n.code,{children:"Result"})," type to handle errors gracefully. Common errors include:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'Error::Benchmark("No suitable GPU adapter found")'}),": System lacks required GPU capabilities"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'Error::Benchmark("Failed to create device: {error}")'}),": GPU initialization failed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'Error::Benchmark("No matrix multiplications were performed during the benchmark")'}),": Benchmark failed to run any iterations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'Error::Benchmark("No activation function operations were performed during the benchmark")'}),": Benchmark failed to run any iterations"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{})})]})}function a(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}}}]);