"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[802],{8453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>s});var t=a(6540);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}},8632:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"Examples/system-info/gpu-information","title":"GPU Information Examples","description":"This section provides examples of how to use the CatP2P library to retrieve and monitor GPU information.","source":"@site/docs/Examples/system-info/gpu-information.md","sourceDirName":"Examples/system-info","slug":"/Examples/system-info/gpu-information","permalink":"/catp2p/docs/Examples/system-info/gpu-information","draft":false,"unlisted":false,"editUrl":"https://github.com/johnnyvillas/catp2p/tree/main/docs-site/docs/Examples/system-info/gpu-information.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"System Information","permalink":"/catp2p/docs/category/system-information-2"},"next":{"title":"Benchmarks","permalink":"/catp2p/docs/category/benchmarks"}}');var r=a(4848),i=a(8453);const o={},s="GPU Information Examples",l={},p=[{value:"Available Examples",id:"available-examples",level:2},{value:"Running the Examples",id:"running-the-examples",level:2},{value:"Example: Basic GPU Information",id:"example-basic-gpu-information",level:2},{value:"Example: All GPUs Information",id:"example-all-gpus-information",level:2},{value:"Example: GPU Usage Information",id:"example-gpu-usage-information",level:2},{value:"Example: GPU Usage Monitoring",id:"example-gpu-usage-monitoring",level:2},{value:"Example: Performance Comparison",id:"example-performance-comparison",level:2},{value:"Example: Run All Examples",id:"example-run-all-examples",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Related Resources",id:"related-resources",level:2}];function m(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"gpu-information-examples",children:"GPU Information Examples"})}),"\n",(0,r.jsx)(n.p,{children:"This section provides examples of how to use the CatP2P library to retrieve and monitor GPU information."}),"\n",(0,r.jsx)(n.h2,{id:"available-examples",children:"Available Examples"}),"\n",(0,r.jsx)(n.p,{children:"CatP2P provides several examples demonstrating different aspects of GPU information retrieval:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Basic GPU Information"}),": Retrieves detailed information about the primary GPU."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"All GPUs Information"}),": Gets information about all available GPUs in the system."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"GPU Usage Information"}),": Retrieves real-time usage information about the GPU."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"GPU Usage Monitoring"}),": Monitors GPU usage and temperature over time."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance Comparison"}),": Compares the performance of different GPU information methods."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Run All Examples"}),": Interactive example that allows you to run any or all of the above examples."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"running-the-examples",children:"Running the Examples"}),"\n",(0,r.jsx)(n.p,{children:"You can run any of these examples using Cargo:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Run the interactive example that lets you choose which examples to run\ncargo run --example hardware_gpu_run_all\n\n# Or run individual examples directly:\ncargo run --example hardware_gpu_basic_info\ncargo run --example hardware_gpu_all_gpus\ncargo run --example hardware_gpu_usage_info\ncargo run --example hardware_gpu_monitoring\ncargo run --example hardware_gpu_performance\n"})}),"\n",(0,r.jsx)(n.h2,{id:"example-basic-gpu-information",children:"Example: Basic GPU Information"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://github.com/johnnyvillas/catp2p/blob/main/examples/hardware/gpu/basic_info.rs",children:"basic_info.rs"})," example demonstrates how to retrieve detailed information about the primary GPU in your system."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use catp2p::hardware::gpu::{get_info, TemperatureUnit};\nuse catp2p::error::Error;\n\nfn main() -> Result<(), Error> {\n    let gpu_info = get_info()?;\n    \n    println!("Primary GPU Details:");\n    println!("Name: {}", gpu_info.name);\n    println!("Vendor: {}", gpu_info.vendor);\n    println!("Architecture: {}", gpu_info.architecture);\n    println!("Driver: {}", gpu_info.driver);\n    println!("VRAM: {}", gpu_info.vram);\n    println!("Type: {}", if gpu_info.is_integrated { "Integrated" } else { "Discrete" });\n    \n    // Display temperature if available (in both Celsius and Fahrenheit)\n    if let Some(temp) = gpu_info.temperature {\n        println!("Temperature: {:.1}\xb0C / {:.1}\xb0F", \n                 temp, \n                 gpu_info.temperature_in(TemperatureUnit::Fahrenheit).unwrap());\n    }\n    \n    // Display additional properties if available\n    if !gpu_info.additional_properties.is_empty() {\n        println!("\\nAdditional Properties:");\n        for (key, value) in &gpu_info.additional_properties {\n            println!("{}: {}", key, value);\n        }\n    }\n    \n    Ok(())\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"example-all-gpus-information",children:"Example: All GPUs Information"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://github.com/johnnyvillas/catp2p/blob/main/examples/hardware/gpu/all_gpus.rs",children:"all_gpus.rs"})," example shows how to retrieve information about all GPUs available in your system."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use catp2p::hardware::gpu::{get_all_info, TemperatureUnit};\nuse catp2p::error::Error;\n\nfn main() -> Result<(), Error> {\n    let gpu_infos = get_all_info()?;\n    \n    println!("Number of GPUs detected: {}", gpu_infos.len());\n    \n    for (i, gpu_info) in gpu_infos.iter().enumerate() {\n        println!("\\nGPU {}: {}", i+1, gpu_info.name);\n        println!("Vendor: {}", gpu_info.vendor);\n        println!("Architecture: {}", gpu_info.architecture);\n        println!("Driver: {}", gpu_info.driver);\n        println!("VRAM: {}", gpu_info.vram);\n        println!("Type: {}", if gpu_info.is_integrated { "Integrated" } else { "Discrete" });\n        \n        // Display temperature if available\n        if let Some(temp) = gpu_info.temperature {\n            println!("Temperature: {:.1}\xb0C / {:.1}\xb0F", \n                     temp, \n                     gpu_info.temperature_in(TemperatureUnit::Fahrenheit).unwrap());\n        }\n        \n        // Display key properties if available\n        if !gpu_info.additional_properties.is_empty() {\n            let important_props = ["Total VRAM", "Free VRAM", "GPU Utilization"];\n            let mut has_props = false;\n            \n            for prop in important_props.iter() {\n                if let Some(value) = gpu_info.additional_properties.get(*prop) {\n                    if !has_props {\n                        println!("\\nKey Properties:");\n                        has_props = true;\n                    }\n                    println!("{}: {}", prop, value);\n                }\n            }\n        }\n    }\n    \n    Ok(())\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"example-gpu-usage-information",children:"Example: GPU Usage Information"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://github.com/johnnyvillas/catp2p/blob/main/examples/hardware/gpu/usage_info.rs",children:"usage_info.rs"})," example demonstrates how to retrieve real-time usage information about the GPU."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use catp2p::hardware::gpu::{get_info, get_usage, TemperatureUnit};\nuse catp2p::error::Error;\n\nfn main() -> Result<(), Error> {\n    // First get basic GPU info\n    let gpu_info = get_info()?;\n    \n    println!("GPU: {}", gpu_info.name);\n    \n    // Display temperature if available\n    if let Some(temp) = gpu_info.temperature {\n        println!("Temperature: {:.1}\xb0C / {:.1}\xb0F", \n                 temp, \n                 gpu_info.temperature_in(TemperatureUnit::Fahrenheit).unwrap());\n    }\n    \n    // Get real-time usage information\n    let usage = get_usage()?;\n    \n    println!("\\nGPU Usage Details:");\n    println!("GPU Utilization: {:.1}%", usage.gpu_usage_percent);\n    println!("VRAM Usage: {} / {}", usage.used_vram, usage.total_vram);\n    \n    // Calculate percentage of VRAM used\n    if usage.total_vram_bytes > 0 {\n        let vram_percent = (usage.used_vram_bytes as f32 / usage.total_vram_bytes as f32) * 100.0;\n        println!("VRAM Utilization: {:.1}%", vram_percent);\n    }\n    \n    Ok(())\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"example-gpu-usage-monitoring",children:"Example: GPU Usage Monitoring"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://github.com/johnnyvillas/catp2p/blob/main/examples/hardware/gpu/monitoring.rs",children:"monitoring.rs"})," example demonstrates how to monitor GPU usage and temperature over time."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use catp2p::hardware::gpu::{monitor_usage, get_info, TemperatureUnit};\nuse catp2p::error::Error;\nuse std::time::Duration;\n\nfn main() -> Result<(), Error> {\n    // Get initial temperature\n    let initial_info = get_info()?;\n    println!("GPU: {}", initial_info.name);\n    \n    if let Some(temp) = initial_info.temperature {\n        println!("Initial Temperature: {:.1}\xb0C / {:.1}\xb0F", \n                 temp, \n                 initial_info.temperature_in(TemperatureUnit::Fahrenheit).unwrap());\n    }\n    \n    println!("\\nMonitoring GPU usage for 3 seconds...");\n    \n    let stats = monitor_usage(Duration::from_secs(3), Duration::from_millis(500))?;\n    \n    println!("\\nGPU Usage Statistics:");\n    println!("Name: {}", stats.name);\n    println!("Average GPU Utilization: {:.1}%", stats.avg_usage_percent);\n    println!("Min/Max GPU Utilization: {:.1}% / {:.1}%", \n            stats.min_usage_percent, stats.max_usage_percent);\n    println!("Average VRAM Usage: {}", stats.avg_used_vram);\n    println!("Min/Max VRAM Usage: {} / {}", \n            stats.min_used_vram, stats.max_used_vram);\n    println!("Total VRAM: {}", stats.total_vram);\n    println!("Samples Collected: {}", stats.sample_count);\n    println!("Monitoring Duration: {:?}", stats.duration);\n    \n    // Check temperature after monitoring\n    let final_info = get_info()?;\n    if let Some(final_temp) = final_info.temperature {\n        println!("\\nFinal Temperature: {:.1}\xb0C / {:.1}\xb0F", \n                 final_temp, \n                 final_info.temperature_in(TemperatureUnit::Fahrenheit).unwrap());\n        \n        // Show temperature change\n        if let Some(initial_temp) = initial_info.temperature {\n            let temp_diff = final_temp - initial_temp;\n            println!("Temperature Change: {:.1}\xb0C", temp_diff);\n        }\n    }\n    \n    Ok(())\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"example-performance-comparison",children:"Example: Performance Comparison"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://github.com/johnnyvillas/catp2p/blob/main/examples/hardware/gpu/performance.rs",children:"performance.rs"})," example compares the performance of different GPU information methods."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use catp2p::hardware::gpu::{get_info, get_all_info, is_available, get_usage};\nuse catp2p::error::Error;\nuse std::time::Instant;\n\nfn main() -> Result<(), Error> {\n    let iterations = 5;\n    println!("Running {} iterations of each method:", iterations);\n    \n    // Measure performance of different methods\n    let mut total_time_info = std::time::Duration::new(0, 0);\n    let mut total_time_all_info = std::time::Duration::new(0, 0);\n    let mut total_time_available = std::time::Duration::new(0, 0);\n    let mut total_time_usage = std::time::Duration::new(0, 0);\n    \n    for i in 1..=iterations {\n        // Measure get_info performance\n        let start = Instant::now();\n        let _ = get_info()?;\n        total_time_info += start.elapsed();\n        \n        // Measure get_all_info performance\n        let start = Instant::now();\n        let _ = get_all_info()?;\n        total_time_all_info += start.elapsed();\n        \n        // Measure is_available performance\n        let start = Instant::now();\n        let _ = is_available();\n        total_time_available += start.elapsed();\n        \n        // Measure get_usage performance\n        let start = Instant::now();\n        let _ = get_usage()?;\n        total_time_usage += start.elapsed();\n    }\n    \n    // Calculate averages\n    let avg_time_info = total_time_info / iterations;\n    let avg_time_all_info = total_time_all_info / iterations;\n    let avg_time_available = total_time_available / iterations;\n    let avg_time_usage = total_time_usage / iterations;\n    \n    // Print performance summary\n    println!("\\nPerformance Summary:");\n    println!("Average time for get_info(): {:?}", avg_time_info);\n    println!("Average time for get_all_info(): {:?}", avg_time_all_info);\n    println!("Average time for is_available(): {:?}", avg_time_available);\n    println!("Average time for get_usage(): {:?}", avg_time_usage);\n    \n    Ok(())\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"example-run-all-examples",children:"Example: Run All Examples"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://github.com/johnnyvillas/catp2p/blob/main/examples/hardware/gpu/run_all.rs",children:"run_all.rs"})," example provides an interactive interface to run any or all of the GPU information examples."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use catp2p::hardware::gpu::{get_info, get_all_info, is_available, get_usage, monitor_usage, TemperatureUnit};\nuse catp2p::error::Error;\nuse std::io::{self, Write};\n\nfn main() -> Result<(), Error> {\n    println!("=== CatP2P GPU Information Examples ===");\n    \n    let examples = [\n        ("GPU Availability Check", "cargo run --example hardware_gpu_availability"),\n        ("Basic GPU Information", "cargo run --example hardware_gpu_basic_info"),\n        ("All GPUs Information", "cargo run --example hardware_gpu_all_gpus"),\n        ("GPU Usage Information", "cargo run --example hardware_gpu_usage_info"),\n        ("GPU Usage Monitoring", "cargo run --example hardware_gpu_monitoring"),\n        ("Performance Comparison", "cargo run --example hardware_gpu_performance"),\n    ];\n    \n    println!("\\nAvailable Examples:");\n    for (i, (name, command)) in examples.iter().enumerate() {\n        println!("{}. {} - Run with: {}", i+1, name, command);\n    }\n    \n    println!("\\nOptions:");\n    println!("A. Run all examples");\n    for (i, (name, _)) in examples.iter().enumerate() {\n        println!("{}. {}", i+1, name);\n    }\n    println!("Q. Quit");\n    \n    // Interactive menu to choose examples to run\n    // (Implementation details omitted for brevity)\n    \n    Ok(())\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.p,{children:"When working with GPU information in your applications, consider these best practices:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Check Availability First"}),": Always check if a GPU is available before attempting GPU operations."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cache Information"}),": Cache GPU information when possible to avoid repeated queries."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Handle Errors"}),": Always handle errors from GPU information functions, as hardware detection can fail."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Monitor Sparingly"}),": Use monitoring functions sparingly to minimize performance impact."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Consider Multiple GPUs"}),": If your application might run on systems with multiple GPUs, use ",(0,r.jsx)(n.code,{children:"get_all_info()"})," to detect them."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance Considerations"}),": Choose the appropriate method based on your needs - ",(0,r.jsx)(n.code,{children:"is_available()"})," is fastest for simple checks."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Temperature Monitoring"}),": For applications that stress the GPU, monitor temperature to ensure safe operation."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"related-resources",children:"Related Resources"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/docs/docs/system-info/gpu_info",children:"GPU Information Documentation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/docs/api/system-info/gpu",children:"GPU Information API Reference"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}}}]);