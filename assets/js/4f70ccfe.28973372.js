"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[805],{8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var s=r(6540);const i={},c=s.createContext(i);function a(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(c.Provider,{value:n},e.children)}},8623:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>t,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"Examples/benchmarks/cpu-benchmark-example","title":"CPU Benchmark Examples","description":"This page provides examples of how to use the CPU benchmarking functionality in CatP2P.","source":"@site/docs/Examples/benchmarks/cpu-benchmark-example.md","sourceDirName":"Examples/benchmarks","slug":"/Examples/benchmarks/cpu-benchmark-example","permalink":"/catp2p/docs/Examples/benchmarks/cpu-benchmark-example","draft":false,"unlisted":false,"editUrl":"https://github.com/johnnyvillas/catp2p/tree/main/docs-site/docs/Examples/benchmarks/cpu-benchmark-example.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"GPU Benchmark Examples","permalink":"/catp2p/docs/Examples/benchmarks/gpu-benchmark-example"}}');var i=r(4848),c=r(8453);const a={sidebar_position:2},o="CPU Benchmark Examples",t={},l=[{value:"Basic CPU Benchmark Example",id:"basic-cpu-benchmark-example",level:2},{value:"Running the Example",id:"running-the-example",level:3},{value:"Sample Output",id:"sample-output",level:3},{value:"What This Example Demonstrates",id:"what-this-example-demonstrates",level:3},{value:"Understanding the Results",id:"understanding-the-results",level:2},{value:"CPU Benchmark Score",id:"cpu-benchmark-score",level:3},{value:"Single-Core Performance",id:"single-core-performance",level:3},{value:"Multi-Core Scaling",id:"multi-core-scaling",level:3},{value:"Efficiency Percentage",id:"efficiency-percentage",level:3},{value:"Creating Your Own CPU Benchmarks",id:"creating-your-own-cpu-benchmarks",level:2}];function m(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"cpu-benchmark-examples",children:"CPU Benchmark Examples"})}),"\n",(0,i.jsx)(n.p,{children:"This page provides examples of how to use the CPU benchmarking functionality in CatP2P."}),"\n",(0,i.jsx)(n.h2,{id:"basic-cpu-benchmark-example",children:"Basic CPU Benchmark Example"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"examples/cpu_benchmark.rs"})," file in the CatP2P repository demonstrates comprehensive CPU benchmarking capabilities."]}),"\n",(0,i.jsx)(n.h3,{id:"running-the-example",children:"Running the Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cargo run --example cpu_benchmark\n"})}),"\n",(0,i.jsx)(n.h3,{id:"sample-output",children:"Sample Output"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"=== CatP2P CPU Information and Benchmarking ===\n\n--- CPU Information ---\nCPU Model: AMD Ryzen 7 3700X 8-Core Processor\nCPU Vendor: AuthenticAMD\nCPU Cores: 16 (Logical: 16)\nCPU Frequency: 3600 MHz\nCurrent CPU Usage: 43%\nTime to query CPU info: 591.23ms\n\n--- CPU Performance Benchmark ---\nRunning CPU benchmark...\nCPU Benchmark Score: 22834.19\nBenchmark completed in: 175.18ms\n\n--- Single Core Performance ---\nSingle-core benchmark (1000000 iterations): 6 ms (took 6.87ms)\nSingle-core benchmark (10000000 iterations): 69 ms (took 69.04ms)\nSingle-core benchmark (100000000 iterations): 687 ms (took 687.42ms)\n\n--- Multi-Core Scaling ---\nMulti-core benchmark (1 cores): 411 ms (took 411.64ms)\nMulti-core benchmark (2 cores): 420 ms (took 420.37ms)\nMulti-core benchmark (4 cores): 424 ms (took 424.89ms)\nMulti-core benchmark (8 cores): 594 ms (took 595.39ms)\nMulti-core benchmark (16 cores): 907 ms (took 907.63ms)\n\n--- Floating-Point Performance ---\nFloating-point benchmark (10000000 iterations): 104 ms (took 104.31ms)\n\n--- Averaged Benchmarks (3 iterations each) ---\nAveraged single-core benchmark: 73 ms (took 220.03ms)\nAveraged multi-core benchmark (16 cores): 185 ms (took 559.96ms)\nAveraged floating-point benchmark: 96 ms (took 290.68ms)\n\n--- Multi-Core Scaling Visualization ---\nLower is better:\n1  cores: 411   ms |######################|\n2  cores: 420   ms |#######################|\n4  cores: 424   ms |#######################|\n8  cores: 594   ms |################################|\n16 cores: 907   ms |##################################################|\n\n--- Speedup Ratios ---\nRelative to single-core performance:\n1  cores: 1x speedup\n2  cores: 0.98x speedup\n4  cores: 0.97x speedup\n8  cores: 0.69x speedup\n16 cores: 0.45x speedup\n\nIdeal vs. Actual Scaling:\nCores | Ideal Speedup | Actual Speedup | Efficiency\n------|---------------|----------------|----------\n1     | 1.00          | 1.00           | 100.00%\n2     | 2.00          | 0.98           | 48.93%\n4     | 4.00          | 0.97           | 24.24%\n8     | 8.00          | 0.69           | 8.65%\n16    | 16.00         | 0.45           | 2.83%\n\nCPU benchmarking completed!\n"})}),"\n",(0,i.jsx)(n.h3,{id:"what-this-example-demonstrates",children:"What This Example Demonstrates"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CPU Information Gathering"}),": Querying and displaying detailed CPU information"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Overall CPU Benchmark"}),": Testing general CPU performance"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Single-Core Performance"}),": Testing performance with different workload sizes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multi-Core Scaling"}),": Testing how performance scales with different thread counts"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Floating-Point Performance"}),": Testing floating-point computation performance"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Averaged Benchmarks"}),": Running multiple iterations for more consistent results"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance Visualization"}),": Using ASCII charts to visualize multi-core scaling"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Speedup Analysis"}),": Analyzing actual vs. ideal multi-core performance scaling"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"understanding-the-results",children:"Understanding the Results"}),"\n",(0,i.jsx)(n.h3,{id:"cpu-benchmark-score",children:"CPU Benchmark Score"}),"\n",(0,i.jsx)(n.p,{children:"The overall CPU benchmark score is a composite metric that represents general CPU performance. Higher scores indicate better performance."}),"\n",(0,i.jsx)(n.h3,{id:"single-core-performance",children:"Single-Core Performance"}),"\n",(0,i.jsx)(n.p,{children:"This test measures how quickly the CPU can perform a fixed number of operations on a single core. Lower times (in milliseconds) indicate better performance."}),"\n",(0,i.jsx)(n.h3,{id:"multi-core-scaling",children:"Multi-Core Scaling"}),"\n",(0,i.jsx)(n.p,{children:"This test shows how performance scales when using multiple CPU cores. Ideally, using more cores should reduce execution time proportionally, but real-world scaling is affected by factors like:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Thread synchronization overhead"}),"\n",(0,i.jsx)(n.li,{children:"Memory bandwidth limitations"}),"\n",(0,i.jsx)(n.li,{children:"Cache contention"}),"\n",(0,i.jsx)(n.li,{children:"Operating system scheduling"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"efficiency-percentage",children:"Efficiency Percentage"}),"\n",(0,i.jsx)(n.p,{children:"The efficiency percentage shows how well the CPU utilizes multiple cores compared to the theoretical ideal:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"100% efficiency means perfect scaling (doubling cores halves execution time)"}),"\n",(0,i.jsx)(n.li,{children:"Lower percentages indicate diminishing returns when adding more cores"}),"\n",(0,i.jsx)(n.li,{children:"Very low efficiency with many cores may indicate a bottleneck in the workload"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"In this example, we can see that the efficiency drops significantly as more cores are added, which is common for many workloads due to synchronization overhead and memory bottlenecks."}),"\n",(0,i.jsx)(n.h2,{id:"creating-your-own-cpu-benchmarks",children:"Creating Your Own CPU Benchmarks"}),"\n",(0,i.jsx)(n.p,{children:"You can create your own CPU benchmark scripts based on the examples. Here's a minimal example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'use catp2p::benchmark::cpu;\nuse catp2p::error::Error;\n\nfn main() -> Result<(), Error> {\n    // Get CPU information\n    let cpu_info = cpu::get_cpu_info()?;\n    println!("CPU: {} with {} cores", cpu_info.name, cpu_info.logical_cores);\n    \n    // Run a simple benchmark\n    let score = cpu::run_cpu_benchmark()?;\n    println!("CPU Benchmark Score: {:.2}", score);\n    \n    // Test multi-core scaling\n    let cores_to_test = [1, 2, 4, cpu_info.logical_cores];\n    \n    for &cores in &cores_to_test {\n        if cores <= cpu_info.logical_cores {\n            let duration = cpu::run_multi_core_benchmark(cores, 10_000_000)?;\n            println!("{} cores: {} ms", cores, duration.as_millis());\n        }\n    }\n    \n    Ok(())\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["For more detailed examples, see the ",(0,i.jsx)(n.a,{href:"/catp2p/docs/Benchmarking/cpu-benchmarking",children:"CPU Benchmarking"})," and ",(0,i.jsx)(n.a,{href:"/catp2p/docs/api/benchmark/cpu",children:"API Reference"})," pages."]})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}}}]);