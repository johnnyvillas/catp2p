"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[687],{2045:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"Examples/benchmarks/gpu-benchmark-example","title":"GPU Benchmark Examples","description":"This page provides examples of how to use the GPU benchmarking functionality in CatP2P.","source":"@site/docs/Examples/benchmarks/gpu-benchmark-example.md","sourceDirName":"Examples/benchmarks","slug":"/Examples/benchmarks/gpu-benchmark-example","permalink":"/catp2p/docs/Examples/benchmarks/gpu-benchmark-example","draft":false,"unlisted":false,"editUrl":"https://github.com/johnnyvillas/catp2p/tree/main/docs-site/docs/Examples/benchmarks/gpu-benchmark-example.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Benchmarks","permalink":"/catp2p/docs/category/benchmarks"},"next":{"title":"CPU Benchmark Examples","permalink":"/catp2p/docs/Examples/benchmarks/cpu-benchmark-example"}}');var t=a(4848),i=a(8453);const s={sidebar_position:1},o="GPU Benchmark Examples",c={},l=[{value:"Basic GPU Benchmark Example",id:"basic-gpu-benchmark-example",level:2},{value:"Running the Example",id:"running-the-example",level:3},{value:"Sample Output",id:"sample-output",level:3},{value:"What This Example Demonstrates",id:"what-this-example-demonstrates",level:3},{value:"Creating Your Own Benchmarks",id:"creating-your-own-benchmarks",level:2}];function m(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"gpu-benchmark-examples",children:"GPU Benchmark Examples"})}),"\n",(0,t.jsx)(n.p,{children:"This page provides examples of how to use the GPU benchmarking functionality in CatP2P."}),"\n",(0,t.jsx)(n.h2,{id:"basic-gpu-benchmark-example",children:"Basic GPU Benchmark Example"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"examples/gpu_benchmark.rs"})," file in the CatP2P repository demonstrates comprehensive GPU benchmarking capabilities."]}),"\n",(0,t.jsx)(n.h3,{id:"running-the-example",children:"Running the Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cargo run --example gpu_benchmark\n"})}),"\n",(0,t.jsx)(n.h3,{id:"sample-output",children:"Sample Output"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'=== CatP2P GPU Benchmarking Example ===\n\n--- GPU Information ---\nGPU Model: NVIDIA GeForce GTX 1060 6GB\nGPU Vendor: 4318\nGPU Driver: Driver: "NVIDIA", Backend: Vulkan\nEstimated VRAM: 8+ GB\nBackend: Vulkan\nType: Discrete\n\n--- GPU Matrix Multiplication Benchmark ---\nRunning matrix multiplication benchmark... Done! (took 5.21s)\nTest: Matrix Multiplication (1024x1024)\nScore: 5043598.09 MFLOPS\nAverage FPS: 1824.87\nMin/Max FPS: 1532.49/2105.26\n\n--- GPU Scaling with Complexity ---\nRunning benchmarks with different complexity levels...\nComplexity level 3: Done! (took 2.13s)\n  Matrix size: 896x896\n  Score: 3421587.32 MFLOPS\n  Average FPS: 4812.76\nComplexity level 5: Done! (took 2.18s)\n  Matrix size: 1152x1152\n  Score: 7865432.18 MFLOPS\n  Average FPS: 5134.21\nComplexity level 8: Done! (took 2.25s)\n  Matrix size: 1536x1536\n  Score: 12876543.21 MFLOPS\n  Average FPS: 3567.89\n\n--- Intensive GPU Benchmark ---\nRunning intensive benchmark with complexity level 10... Done! (took 3.15s)\nTest: Matrix Multiplication (1792x1792)\nScore: 17637699.80 MFLOPS\nAverage FPS: 3087.54\n\n--- GPU Performance Scaling with Complexity ---\nHigher is better:\nComplexity  3:  3421587.32 MFLOPS |####################                              |\nComplexity  5:  7865432.18 MFLOPS |###########################################       |\nComplexity  8: 12876543.21 MFLOPS |################################################  |\nComplexity 10: 17637699.80 MFLOPS |##################################################|\n\n--- Neural Network Activation Functions Benchmark ---\nPreparing benchmark data (1000000 elements)... Done! (took 0.05s)\nRunning activation functions benchmark... Done! (took 2.08s)\nTest: Neural Network Activation Functions\nData size: 1000000 elements\nScore: 4532876.54\nAverage FPS: 1132.45\nMin/Max FPS: 987.65/1243.21\nOperations: ReLU, Sigmoid, Tanh, Leaky ReLU\n\n--- GPU Benchmark Summary ---\nGPU benchmarking completed!\nTested GPU: NVIDIA GeForce GTX 1060 6GB (Discrete)\nAverage matrix multiplication performance: 8959077.89 MFLOPS\nPeak matrix multiplication performance: 17637699.80 MFLOPS\n'})}),"\n",(0,t.jsx)(n.h3,{id:"what-this-example-demonstrates",children:"What This Example Demonstrates"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"GPU Information Gathering"}),": Querying and displaying detailed GPU information"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Matrix Multiplication Benchmark"}),": Testing basic compute performance"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Complexity Scaling"}),": Testing how performance scales with different workload sizes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Activation Functions Benchmark"}),": Testing neural network operations performance"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance Visualization"}),": Using ASCII charts to visualize performance scaling"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Benchmark Summary"}),": Providing an overview of the GPU's capabilities"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"creating-your-own-benchmarks",children:"Creating Your Own Benchmarks"}),"\n",(0,t.jsx)(n.p,{children:"You can create your own GPU benchmark scripts based on the examples. Here's a minimal example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use catp2p::benchmark::gpu::GpuBenchmarkContext;\nuse std::time::Duration;\nuse catp2p::error::Error;\n\nfn main() -> Result<(), Error> {\n    // Create a benchmark context\n    let context = GpuBenchmarkContext::new()?;\n    \n    // Run a matrix multiplication benchmark\n    let result = context.run_matrix_mult(Duration::from_secs(3), 1024)?;\n    \n    println!("GPU: {}", context.gpu_info.name);\n    println!("Score: {:.2} MFLOPS", result.score);\n    \n    Ok(())\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>o});var r=a(6540);const t={},i=r.createContext(t);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);